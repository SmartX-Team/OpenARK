[package]
name = "kubegraph-market-gateway"

authors = { workspace = true }
description = { workspace = true }
documentation = { workspace = true }
edition = { workspace = true }
include = { workspace = true }
keywords = { workspace = true }
license = { workspace = true }
readme = { workspace = true }
rust-version = { workspace = true }
homepage = { workspace = true }
repository = { workspace = true }
version = { workspace = true }

[lints]
workspace = true

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[features]
default = ["default-tls", "full"]
full = [
    "connector-full",
    "df-full",
    "function-full",
    "graph-full",
    "solver-full",
    # "trader-full",
    "vm-full",
]

# Configure Connectors
connector-full = ["connector-fake", "connector-prometheus", "connector-local"]
connector-fake = [
    "kubegraph-api/connector-fake",
    "kubegraph-vm-local?/connector-fake",
]
connector-local = [
    "kubegraph-api/connector-local",
    "kubegraph-vm-local?/connector-local",
]
connector-prometheus = [
    "kubegraph-api/connector-prometheus",
    "kubegraph-vm-local?/connector-prometheus",
]

# Configure DataFrame
df-full = ["df-polars"]
df-polars = ["kubegraph-api/df-polars", "kubegraph-vm-local?/df-polars"]

# Configure Functions
function-full = ["function-fake", "function-webhook"]
function-fake = [
    "kubegraph-api/function-fake",
    "kubegraph-vm-local?/function-fake",
]
function-webhook = [
    "kubegraph-api/function-webhook",
    "kubegraph-vm-local?/function-webhook",
]

# Configure Graph Databases
graph-full = ["graph-local", "graph-memory"]
graph-local = ["kubegraph-vm-local?/graph-local"]
graph-memory = ["kubegraph-vm-local?/graph-memory"]

# Configure Solvers
solver-full = ["solver-ortools"]
solver-ortools = ["kubegraph-vm-local?/solver-ortools"]

# Configure Traders
trader-full = ["trader-default"]
trader-default = ["kubegraph-vm-local?/trader-default"]

# Configure Virtual Machines
vm-full = ["vm-local"]
vm-local = ["kubegraph-vm-local"]

# TLS
default-tls = ["rustls-tls"]
openssl-tls = [
    "actix-web/openssl",
    "kubegraph-api/openssl-tls",
    "kubegraph-market-entity/openssl-tls",
    "kubegraph-market-function/openssl-tls",
    "kubegraph-market-migration/openssl-tls",
    "kubegraph-vm-local?/openssl-tls",
    "sea-orm/runtime-tokio-native-tls",
]
rustls-tls = [
    "actix-web/rustls",
    "kubegraph-api/rustls-tls",
    "kubegraph-market-entity/rustls-tls",
    "kubegraph-market-function/rustls-tls",
    "kubegraph-market-migration/rustls-tls",
    "kubegraph-vm-local?/rustls-tls",
    "sea-orm/runtime-tokio-rustls",
]

[dependencies]
ark-core = { path = "../../../ark/core", features = ["signal"] }
kubegraph-api = { path = "../../api", default-features = false }
kubegraph-market-entity = { path = "../entity" }
kubegraph-market-function = { path = "../function" }
kubegraph-market-migration = { path = "../migration" }
kubegraph-vm-local = { path = "../../vm/local", optional = true, default-features = false }

actix-web = { workspace = true }
actix-web-opentelemetry = { workspace = true }
anyhow = { workspace = true }
async-trait = { workspace = true }
chrono = { workspace = true }
clap = { workspace = true }
dirs = { workspace = true }
futures = { workspace = true }
sea-orm = { workspace = true }
serde = { workspace = true, features = ["derive"] }
tokio = { workspace = true, features = ["full"] }
tracing = { workspace = true }
uuid = { workspace = true }
