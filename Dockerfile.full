# Copyright (c) 2022 Ho Kim (ho.kim@ulagbulag.io). All rights reserved.
# Use of this source code is governed by a GPL-3-style license that can be
# found in the LICENSE file.

# Configure environment variables
ARG FUNCTION_HOME="/opt/dash/functions/builtins"
ARG PACKAGE="openark"
ARG PYTORCH_RELEASE="23.08"
ARG PYTHON_VERSION="3"
ARG ROS_DISTRO="humble"

# Be ready for serving
FROM "nvcr.io/nvidia/pytorch:${PYTORCH_RELEASE}-py${PYTHON_VERSION}" as server

# Package Manager Configuration
ARG DEBIAN_FRONTEND='noninteractive'

# Server Configuration
EXPOSE 80/tcp
WORKDIR /usr/local/bin
CMD [ "/bin/sh" ]

# Install dependencies
RUN apt-get update && apt-get install -y \
    curl \
    hwloc \
    s3fs \
    udev \
    # Cleanup
    && rm -rf /var/lib/apt/lists/*

# Install ROS2 dependencies
ARG ROS_DISTRO
RUN apt-get update && apt-get install -y \
    software-properties-common \
    && add-apt-repository -y universe \
    && curl -sSL "https://raw.githubusercontent.com/ros/rosdistro/master/ros.key" -o "/usr/share/keyrings/ros-archive-keyring.gpg" \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" >"/etc/apt/sources.list.d/ros2.list" \
    && apt-get update && apt-get install -y \
    "ros-${ROS_DISTRO}-ros-base" \
    # Cleanup
    && rm -rf /var/lib/apt/lists/*

# Install python dependencies
ADD ./requirements.txt /requirements.txt
RUN true \
    # Include target-dependent packages
    && sed -i 's/^\( *\)\(.*\# *include *( *[_0-9a-z-]\+ *)\)$/\1# \2/g' /requirements.txt \
    && sed -i "s/^\( *\)\# *\(.*\# *include *( *$(uname -m) *)\)$/\1\2/g" /requirements.txt \
    # Install python dependencies
    && python3 -m pip install --no-cache-dir --requirement /requirements.txt \
    # Cleanup
    && find /usr -type d -name '*__pycache__' -prune -exec rm -rf {} \; \
    && rm /requirements.txt \
    && rm -rf /var/lib/apt/lists/*

# Be ready for building
FROM server as builder

# Install dependencies
ENV CARGO_HOME="/opt/cargo"
ENV RUSTUP_HOME="/opt/rustup"
RUN apt-get update && apt-get install -y \
    build-essential \
    clang \
    cmake \
    libclang-dev \
    libhwloc-dev \
    libprotobuf-dev \
    libprotoc-dev \
    libssl-dev \
    libudev-dev \
    llvm-dev \
    mold \
    nasm \
    protobuf-compiler \
    ros-dev-tools \
    s3fs \
    # Install rustup
    && curl 'https://sh.rustup.rs' -sSf | sh -s -- -y \
    # Cleanup
    && rm -rf /var/lib/apt/lists/*

# Load source files
ADD . /src
WORKDIR /src

# Build it!
ARG FUNCTION_HOME
ARG ROS_DISTRO
RUN mkdir -p /out/bin /out/lib \
    # Setup ROS2 development environment
    && source "/opt/ros/${ROS_DISTRO}/setup.sh" \
    # Include target-dependent packages
    && find ./ -type f -name Cargo.toml -exec sed -i 's/^\( *\)\(.*\# *include *( *[_0-9a-z-]\+ *)\)$/\1# \2/g' {} + \
    && find ./ -type f -name Cargo.toml -exec sed -i "s/^\( *\)\# *\(.*\# *include *( *$(uname -m) *)\)$/\1\2/g" {} + \
    # Build
    && "${CARGO_HOME}/bin/rustup" default stable \
    && "${CARGO_HOME}/bin/cargo" build --all --workspace --release \
    && find ./target/release/ -maxdepth 1 -type f -perm -a=x -print0 | xargs -0 -I {} mv {} /out/bin \
    && mv ./LICENSE /LICENSE \
    # Copy or-tools lib
    && find ./target/release/ -name 'libortools*.so*' -type f -print0 | xargs -0 -I {} mv {} /out/lib \
    && find ./target/release/ -name 'libortools*.so*' -type l -print0 | xargs -0 -I {} mv {} /out/lib \
    # Copy pipe functions
    && mkdir -p "${FUNCTION_HOME}" \
    && mv ./crates/dash/pipe/functions/python/examples "${FUNCTION_HOME}/python" \
    # Cleanup
    && rm -rf /src

# Copy executable files
FROM server
ARG FUNCTION_HOME
COPY --from=builder "${FUNCTION_HOME}" "${FUNCTION_HOME}"
COPY --from=builder /out/bin/* /usr/local/bin/
COPY --from=builder /out/lib/* /usr/local/lib/
COPY --from=builder /LICENSE /usr/share/licenses/${PACKAGE}/LICENSE

# Link 3rd-party binary
ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/lib:/usr/local/lib64"
RUN true \
    # Common
    && echo '/usr/local/lib' >/etc/ld.so.conf.d/100-path-local-lib.conf \
    && echo '/usr/local/lib64' >>/etc/ld.so.conf.d/100-path-local-lib.conf \
    # CUDA :: NVIDIA
    && for file in /usr/local/lib/python*/dist-packages/nvidia/*/lib/*.so*; do true \
    && ln -sf "${file}" "/usr/local/lib/$(basename "${file}")" \
    ; done \
    # CUDA :: PyTorch
    && for file in /usr/local/lib/python*/dist-packages/torch/lib/*.so*; do true \
    && ln -sf "${file}" "/usr/local/lib/$(basename "${file}")" \
    ; done \
    # Apply
    && ldconfig

# # Link onnxruntime CAPI binary
# RUN ORT_DYLIB_PATH="$(python3 -c 'import inspect,os; import onnxruntime; print(f"{os.path.dirname(inspect.getfile(onnxruntime))}/capi")')" \
#     && echo "/usr/local/bin" > "/etc/ld.so.conf.d/onnxruntime-$(arch).conf" \
#     && echo "${ORT_DYLIB_PATH}" > "/etc/ld.so.conf.d/onnxruntime-capi-$(arch).conf" \
#     && echo "export ORT_DYLIB_PATH=${ORT_DYLIB_PATH}" >> "/etc/environment" \
#     && ldconfig
