###########################################################
#   Desktop Deployment                                    #
###########################################################
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: desktop
  namespace: "{{ metadata.namespace }}"
data:
  machine-id: >+
    ffffffffffffffffffffffffffffffff
---
{% if spec.persistence %}
apiVersion: apps/v1
kind: Deployment
{% else %}
apiVersion: batch/v1
kind: Job
{% endif %}
metadata:
  name: desktop
  namespace: "{{ metadata.namespace }}"
  labels:
    name: desktop
    node: "{{ spec.node.metadata.name }}"
spec:
{% if spec.persistence %}
  replicas: 1
  selector:
    matchLabels:
      name: desktop
      node: "{{ spec.node.metadata.name }}"
  strategy:
    rollingUpdate:
      maxUnavailable: 1
{% else %}
  backoffLimit: 0
  suspend: false
  ttlSecondsAfterFinished: 1
{% endif %}
  template:
    metadata:
      labels:
        name: desktop
        node: "{{ spec.node.metadata.name }}"
    spec:
      affinity:
        nodeAffinity:
          # KISS ephemeral control plane nodes should be excluded
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/hostname
                    operator: In
                    values:
                      - "{{ spec.node.metadata.name }}"
{% if spec.boxQuota is object and spec.boxQuota.desktop is object %}
      initContainers:
        - name: init-check-permissions
          image: {{ spec.boxQuota.desktop.container.image | json_encode() | safe }}
          imagePullPolicy: "{{ spec.boxQuota.desktop.container.imagePullPolicy }}"
          command:
            - env
            - bash
            - -c
          args:
            - |
              #!/bin/bash
              set -e -x -o pipefail

              # User Directory Permissions
              sudo mkdir -p "${HOME}/.local/share/containers/storage"
              sudo chown "$(id -u):$(id -g)" \
                "${HOME}/" \
                "${HOME}/.local" \
                "${HOME}/.local/share" \
                "${HOME}/.local/share/containers" \
                "${HOME}/.local/share/containers/storage" \
                '/mnt/public'
              sudo chmod 700 "${HOME}"
              sudo chmod 777 '/mnt/public'

              # GID Mappings
              sudo cp /opt/group-src /opt/group-dst/group
              sudo sed -i '/^kiss:.*$/ d' /opt/group-dst/group
              sudo sed -i 's/:kiss$/:/g' /opt/group-dst/group
              sudo sed -i 's/,kiss$/,/g' /opt/group-dst/group
              sudo sed -i 's/^tenant:/user:/g' /opt/group-dst/group
              sudo sed -i 's/:tenant$/:user/g' /opt/group-dst/group
              sudo sed -i 's/,tenant$/,user/g' /opt/group-dst/group

              # Network Optimizations
              if [ -d /host-sys/module/mac80211/parameters ]; then
                # Make roaming algorithm more loose
                echo 10 | sudo tee /host-sys/module/mac80211/parameters/beacon_loss_count
                echo 20 | sudo tee /host-sys/module/mac80211/parameters/max_probe_tries
                echo 4000 | sudo tee /host-sys/module/mac80211/parameters/probe_wait_ms
              fi

              # Device Permissions
              find /dev -maxdepth 1 -name 'video[0-9]*' -type c -exec sudo chown "$(id -u):$(id -g)" '{}' \;
              exec true
          env:
            - name: HOME
{% if spec.boxQuota.desktop.context.root %}
              value: /root
{% else %}
              value: /home/user
{% endif %}
          securityContext:
            privileged: true
          workingDir: /
          volumeMounts:
            - name: group-src
              mountPath: /opt/group-src
            - name: group-dst
              mountPath: /opt/group-dst
            - name: home
{% if spec.boxQuota.desktop.context.root %}
              mountPath: /root
{% else %}
              mountPath: /home/user
{% endif %}
{% if spec.boxQuota.desktop.volumes.containers != 'RemoteOwned' or spec.boxQuota.desktop.volumes.home != 'RemoteOwned' or not spec.boxQuota.storage is object %}
            - name: home-containers
{% if spec.boxQuota.desktop.context.root %}
              mountPath: /root/.local/share/containers
{% else %}
              mountPath: /home/user/.local/share/containers
{% endif %}
{% if spec.boxQuota.desktop.volumes.containers == 'RemoteOwned' and spec.boxQuota.storage is object %}
              subPath: .local/share/containers
{% endif %}
{% endif %}
            - name: home-public
              mountPath: /mnt/public
            - name: host-sys
              mountPath: /host-sys
      containers:
        - name: desktop-environment
          image: {{ spec.boxQuota.desktop.container.image | json_encode() | safe }}
          imagePullPolicy: "{{ spec.boxQuota.desktop.container.imagePullPolicy }}"
          command: {{ spec.boxQuota.desktop.container.command | json_encode() | safe }}
          args: {{ spec.boxQuota.desktop.container.args | json_encode() | safe }}
          env:
{% if spec.boxQuota.desktop.container.env is iterable %}
{% for var in spec.boxQuota.desktop.container.env %}
            - {{ var | json_encode() | safe }}
{% endfor %}
{% endif %}
            - name: DISPLAY
              value: ":0"
            - name: HOME
{% if spec.boxQuota.desktop.context.root %}
              value: /root
{% else %}
              value: /home/user
{% endif %}
            - name: KISS_DESKTOP_FONTS_URL
              value: {{ spec.boxQuota.desktop.user.template.fontsUrl | json_encode() | safe }}
            - name: KISS_DESKTOP_ICONS_URL
              value: {{ spec.boxQuota.desktop.user.template.iconsUrl | json_encode() | safe }}
            - name: KISS_DESKTOP_THEMES_URL
              value: {{ spec.boxQuota.desktop.user.template.themesUrl | json_encode() | safe }}
            - name: KISS_DESKTOP_TEMPLATE_GIT
              value: {{ spec.boxQuota.desktop.user.template.git | json_encode() | safe }}
            - name: KISS_DESKTOP_TEMPLATE_GIT_BRANCH
              value: {{ spec.boxQuota.desktop.user.template.gitBranch | json_encode() | safe }}
            - name: KUBEGRAPH_URL
              value: http://kubegraph.kubegraph.svc
            - name: LANG
              value: "{{ spec.boxQuota.desktop.user.lang }}"
            - name: LC_ALL
              value: "{{ spec.boxQuota.desktop.user.lc.all }}"
            - name: LOCALE
              value: "{{ spec.boxQuota.desktop.user.locale }}"
            - name: NVIDIA_DRIVER_CAPABILITIES
              value: all
            - name: NVIDIA_VISIBLE_DEVICES
              value: all
            - name: USER
{% if spec.boxQuota.desktop.context.root %}
              value: "0"
{% else %}
              value: "{{ spec.boxQuota.desktop.context.uid }}"
{% endif %}
            - name: XDG_RUNTIME_DIR
              value: "/run/user/{{ spec.boxQuota.desktop.context.uid }}"
          ports: {{ spec.boxQuota.desktop.container.ports | json_encode() | safe }}
          securityContext:
            capabilities:
              add:
                - apparmor:unconfined
                - seccomp:unconfined
{% if spec.boxQuota.desktop.host.privileged %}
            privileged: true
{% endif %}
{% if spec.boxQuota.desktop.context.root %}
          workingDir: /root
{% else %}
          workingDir: /home/user
{% endif %}
          volumeMounts:
            - name: dev
              mountPath: /dev
            - name: dev-dri
              mountPath: /dev/dri
            - name: dev-fuse
              mountPath: /dev/fuse
{% if not spec.boxQuota.desktop.host.ipc %}
            - name: dev-shm
              mountPath: /dev/shm
{% endif %}
            - name: egl-icd-loader
              mountPath: /etc/glvnd/egl_vendor.d
              readOnly: true
            - name: group-dst
              mountPath: /etc/group
              subPath: group
            - name: home
{% if spec.boxQuota.desktop.context.root %}
              mountPath: {{ "/home/user" ~ spec.boxQuota.desktop.volumes.homeBase | json_encode() | safe }}
{% else %}
              mountPath: {{ "/home/user" ~ spec.boxQuota.desktop.volumes.homeBase | json_encode() | safe }}
{% endif %}
{% if spec.boxQuota.desktop.volumes.containers != 'RemoteOwned' or spec.boxQuota.desktop.volumes.home != 'RemoteOwned' or not spec.boxQuota.storage is object %}
            - name: home-containers
{% if spec.boxQuota.desktop.context.root %}
              mountPath: /root/.local/share/containers
{% else %}
              mountPath: /home/user/.local/share/containers
{% endif %}
{% if spec.boxQuota.desktop.volumes.containers == 'RemoteOwned' and spec.boxQuota.storage is object %}
              subPath: .local/share/containers
{% endif %}
{% endif %}
            - name: home-public
              mountPath: /mnt/public
            - name: home-static
              mountPath: /mnt/static
              readOnly: true
            - name: machine-id
              mountPath: /etc/machine-id
              subPath: machine-id
              readOnly: true
            - name: ice
              mountPath: /tmp/.ICE-unix
            - name: logs
              mountPath: /var/log/journal
            - name: runtime-dbus
              mountPath: /run/dbus
            - name: runtime-user
              mountPath: "/run/user/{{ spec.boxQuota.desktop.context.uid }}"
            # - name: scripts
            #   mountPath: /opt/scripts
            #   readOnly: true
            - name: tmp
              mountPath: /tmp
            - name: vine
              mountPath: /tmp/.vine
            - name: vulkan-icd-loader
              mountPath: /etc/vulkan/icd.d
              readOnly: true
            - name: x11
              mountPath: /tmp/.X11-unix
{% if spec.boxQuota.compute is object %}
          resources: {{ spec.boxQuota.compute | json_encode() | safe }}
{% endif %}
{% if spec.boxQuota.desktop.host.ipc %}
      hostIPC: true
{% endif %}
{% if spec.boxQuota.desktop.host.network %}
      hostNetwork: true
{% else %}
      hostname: "desktop-{{ metadata.namespace }}"
{% endif %}
{% if not spec.persistence %}
      restartPolicy: Never
{% endif %}
      securityContext:
{% if spec.boxQuota.desktop.context.root or spec.boxQuota.desktop.context.sudo %}
        runAsNonRoot: false
{% endif %}
{% if spec.boxQuota.desktop.context.root %}
        runAsUser: 0
{% else %}
        runAsUser: {{ spec.boxQuota.desktop.context.uid | json_encode() | safe }}
{% endif %}
      serviceAccount: account
      shareProcessNamespace: true
      terminationGracePeriodSeconds: 60
      volumes:
        - name: dev
          hostPath:
            path: /dev
            type: Directory
        - name: dev-dri
          hostPath:
            path: /dev/dri
            type: Directory
        - name: dev-fuse
          hostPath:
            path: /dev/fuse
            type: CharDevice
{% if not spec.boxQuota.desktop.host.ipc %}
        - name: dev-shm
          emptyDir:
            medium: Memory
{% endif %}
        - name: egl-icd-loader
          hostPath:
            path: /usr/share/glvnd/egl_vendor.d
            type: Directory
        - name: group-src
          hostPath:
            path: /etc/group
            type: File
        - name: group-dst
          emptyDir: {}
        - name: home
{% if spec.boxQuota.desktop.volumes.home == 'LocalOwned' %}
          hostPath:
            path: "/opt/vine/sessions/{{ metadata.namespace }}/home"
            type: DirectoryOrCreate
{% elif spec.boxQuota.desktop.volumes.home == 'LocalShared' %}
          hostPath:
            path: "/opt/vine/sessions/_shared/home"
            type: DirectoryOrCreate
{% elif spec.boxQuota.desktop.volumes.home == 'RemoteOwned' and spec.boxQuota.storage is object %}
          persistentVolumeClaim:
            claimName: desktop
{% else %} {# 'Temporary' #}
          emptyDir: {}
{% endif %}
        - name: home-containers
{% if spec.boxQuota.desktop.volumes.containers == 'LocalOwned' %}
          hostPath:
            path: "/opt/vine/sessions/{{ metadata.namespace }}/containers"
            type: DirectoryOrCreate
{% elif spec.boxQuota.desktop.volumes.containers == 'LocalShared' %}
          hostPath:
            path: "/opt/vine/sessions/_shared/containers"
            type: DirectoryOrCreate
{% elif spec.boxQuota.desktop.volumes.containers == 'RemoteOwned' and spec.boxQuota.storage is object %}
          persistentVolumeClaim:
            claimName: desktop
{% else %} {# 'Temporary' #}
          emptyDir: {}
{% endif %}
        - name: home-public
{% if spec.boxQuota.desktop.volumes.public %}
          persistentVolumeClaim:
            claimName: desktop-public
{% else %}
          emptyDir: {}
{% endif %}
        - name: home-static
{% if spec.boxQuota.desktop.volumes.static %}
          persistentVolumeClaim:
            claimName: desktop-static
{% else %}
          emptyDir: {}
{% endif %}
        - name: host-sys
          hostPath:
            path: /sys
            type: Directory
        - name: machine-id
          configMap:
            defaultMode: 365
            name: desktop
            items:
              - key: machine-id
                path: machine-id
        - name: ice
          hostPath:
            path: /tmp/.ICE-unix
            type: DirectoryOrCreate
        - name: logs
          emptyDir: {}
        - name: runtime-dbus
{% if spec.boxQuota.desktop.host.dbus %}
          hostPath:
            path: /run/dbus
            type: Directory
{% else %}
          emptyDir: {}
{% endif %}
        - name: runtime-user
          hostPath:
            path: "/run/user/{{ spec.boxQuota.desktop.context.uid }}"
            type: DirectoryOrCreate
        # - name: scripts
        #   configMap:
        #     name: vine-desktop-scripts
        #     defaultMode: 365
        - name: tmp
          emptyDir: {}
        - name: vine
          hostPath:
            path: /tmp/.vine
            type: Directory
        - name: vulkan-icd-loader
          hostPath:
            path: /usr/share/vulkan/icd.d
            type: Directory
        - name: x11
          hostPath:
            path: /tmp/.X11-unix
            type: Directory
{% endif %}
###########################################################
#   Remote Desktop Deployment                             #
###########################################################
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: novnc
  namespace: "{{ metadata.namespace }}"
  labels:
    name: novnc
    node: "{{ spec.node.metadata.name }}"
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      name: novnc
      node: "{{ spec.node.metadata.name }}"
  template:
    metadata:
      labels:
        name: novnc
        node: "{{ spec.node.metadata.name }}"
    spec:
      affinity:
        nodeAffinity:
          # KISS ephemeral control plane nodes should be excluded
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/hostname
                    operator: In
                    values:
                      - "{{ spec.node.metadata.name }}"
{% if spec.boxQuota is object and spec.boxQuota.desktop is object %}
      containers:
        - name: x11vnc
          image: quay.io/ulagbulag/openark-vine-x11vnc:latest
          imagePullPolicy: Always
          env:
            - name: DISPLAY
              value: ":0"
            - name: X11VNC_ARGS
              value: -cursor most -noscr -nowcr -nowf -noxdamage
            - name: X11VNC_MULTIPTR
              value: "false"
            - name: X11VNC_XKB
              value: "true"
          ports:
            - name: vnc
              protocol: TCP
              containerPort: 5900
          resources:
            requests:
              cpu: 2000m
              memory: 100Mi
            limits:
              cpu: 4000m
              memory: 2Gi
          volumeMounts:
            - name: x11
              mountPath: /tmp/.X11-unix
        - name: novnc
          image: quay.io/ulagbulag/openark-vine-novnc:latest
          imagePullPolicy: Always
          env:
            - name: NOVNC_VNC_PATH
              value: "/box/vnc/{{ spec.node.metadata.name }}/"
          ports:
            - name: http
              protocol: TCP
              containerPort: 6080
          resources:
            requests:
              cpu: 2000m
              memory: 100Mi
            limits:
              cpu: 4000m
              memory: 2Gi
      hostIPC: true
      securityContext:
{% if spec.boxQuota.desktop.context.root %}
        runAsUser: 0
        fsGroup: 0
{% else %}
        runAsUser: {{ spec.boxQuota.desktop.context.uid | json_encode() | safe }}
        fsGroup: {{ spec.boxQuota.desktop.context.gid | json_encode() | safe }}
{% endif %}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: x11
          hostPath:
            path: /tmp/.X11-unix
            type: Directory
{% endif %}
{% if spec.boxQuota is object and spec.boxQuota.desktop is object %}
{% if spec.boxQuota.desktop.container.ports | length > 0 %}
---
apiVersion: v1
kind: Service
metadata:
  name: desktop
  namespace: "{{ metadata.namespace }}"
  labels:
    name: desktop
    node: "{{ spec.node.metadata.name }}"
spec:
  selector:
    name: desktop
    node: "{{ spec.node.metadata.name }}"
  ports:
{% for port in spec.boxQuota.desktop.container.ports %}
    -
{% if port is containing("name") %}
      name: {{ port.name | json_encode() | safe }}
{% endif %}
{% if port is containing("containerPort") %}
      port: {{ port.containerPort | json_encode() | safe }}
{% endif %}
{% if port is containing("protocol") %}
      protocol: {{ port.protocol | json_encode() | safe }}
{% endif %}
{% endfor %}
{% endif %}
{% endif %}
---
apiVersion: v1
kind: Service
metadata:
  name: novnc
  namespace: "{{ metadata.namespace }}"
  labels:
    name: novnc
    node: "{{ spec.node.metadata.name }}"
spec:
  selector:
    name: novnc
    node: "{{ spec.node.metadata.name }}"
  ports:
    # - name: vnc
    #   port: 5900
    #   protocol: TCP
    #   targetPort: 5900
    - name: http
      port: 80
      protocol: TCP
      targetPort: 6080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: novnc
  namespace: "{{ metadata.namespace }}"
  annotations:
    cert-manager.io/cluster-issuer: ingress-nginx-controller.vine.svc.ops.openark
    kubernetes.io/ingress.class: ingress-nginx-controller.vine.svc.ops.openark
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://$host/oauth2/auth
    nginx.ingress.kubernetes.io/auth-signin: http://$host/oauth2/start?rd=$escaped_request_uri
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    vine.ulagbulag.io/is-service: "true"
    vine.ulagbulag.io/is-service-public: "false"
    vine.ulagbulag.io/is-service-system: "true"
    vine.ulagbulag.io/service-kind: noVNC ({{ spec.node.metadata.name }})
  labels:
    name: novnc
    node: "{{ spec.node.metadata.name }}"
spec:
  rules:
    - host: ingress-nginx-controller.vine.svc.ops.openark
      http:
        paths:
          - path: "/box/{{ spec.node.metadata.name }}/vnc(/|$)(.*)"
            pathType: Prefix
            backend:
              service:
                name: novnc
                port:
                  number: 80
          # - path: "/box/{{ spec.node.metadata.name }}/vnc(/|$)(.*)"
          #   pathType: Prefix
          #   backend:
          #     service:
          #       name: novnc
          #       port:
          #         number: 5900
          - path: "/user/{{ spec.userName }}/vnc(/|$)(.*)"
            pathType: Prefix
            backend:
              service:
                name: novnc
                port:
                  number: 80
###########################################################
#   Storage Deployment                                    #
###########################################################
{% if spec.boxQuota.desktop.volumes.home and spec.boxQuota is object and spec.boxQuota.storage is object %}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: desktop
  namespace: "{{ metadata.namespace }}"
  labels:
    name: desktop
    node: "{{ spec.node.metadata.name }}"
spec:
  accessModes:
    - ReadWriteOnce
  resources: {{ spec.boxQuota.storage | json_encode() | safe }}
{% if spec.boxQuota.storageClassName is string %}
  storageClassName: "{{ spec.boxQuota.storageClassName }}"
{% endif %}
{% endif %}
