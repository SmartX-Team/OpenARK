# Copyright (c) 2023 Ho Kim (ho.kim@ulagbulag.io). All rights reserved.
# Use of this source code is governed by a GPL-3-style license that can be
# found in the LICENSE file.

# Configure environment variables
ARG ARCHLINUX_VERSION="latest"

# Configure user-specific environment variables
ARG USER_GID="2000"
ARG USER_NAME="user"
ARG USER_SHELL="zsh"
ARG USER_SUDO="true"
ARG USER_UID="2000"

# Be ready for serving
FROM "quay.io/archlinux/archlinux:${ARCHLINUX_VERSION}"

# Load user-specific environment variables
ARG USER_GID
ARG USER_NAME
ARG USER_SHELL
ARG USER_SUDO
ARG USER_UID

# SystemD Configuration
ENV container docker
STOPSIGNAL SIGRTMIN+3

# Client Configuration
WORKDIR /root/
ENTRYPOINT [ "/usr/bin/env" ]
CMD [ "/usr/bin/systemctl", "init", "vine-desktop.service", "--system" ]

# Volumes Configuration
## home.user
VOLUME [ "/home/${USER_NAME}" ]

# Add core repositories
RUN true \
    && echo -e '\n[multilib]\nInclude = /etc/pacman.d/mirrorlist' >>/etc/pacman.conf \
    && sed -i 's/^#\?\(Color\)/\1/g' /etc/pacman.conf \
    && sed -i 's/^#\?\(NoProgressBar\)/#\1/g' /etc/pacman.conf \
    && sed -i 's/^#\?\(ParallelDownloads\)/\1/g' /etc/pacman.conf \
    # Regard as normal dist
    && sed -i 's/^#\?\(NoExtract\)/#\1/g' /etc/pacman.conf

# Update default mirrorlist
RUN pacman -Sy --needed --noconfirm \
    reflector \
    && reflector \
    --country 'Japan,South Korea' \
    --latest '5' \
    --protocol 'https' \
    --save '/etc/pacman.d/mirrorlist' \
    --sort 'rate' \
    # Cleanup
    && pacman -Scc --noconfirm \
    && rm -r /var/lib/pacman/sync/*

# Add AUR package manager
ARG PACKAGE_MANAGER="paru"
ARG PACKAGE_MANAGER_DEPENDENCIES="binutils cargo fakeroot gcc make pacman pkg-config sudo"
RUN pacman -Sy --needed --noconfirm \
    "curl" \
    "devtools" \
    "fakechroot" \
    "fakeroot" \
    "git" \
    # Add a build-only user
    && BUILDER_GID="$((USER_GID + 1))" \
    && BUILDER_UID="$((USER_UID + 1))" \
    && BUILDER_NAME="builder" \
    && BUILDER_HOME="/var/lib/builder" \
    && BUILDER_SHELL="sh" \
    && groupadd -g "${BUILDER_GID}" -o "${BUILDER_NAME}" \
    && useradd -u "${BUILDER_UID}" -g "${BUILDER_GID}" \
    -d "${BUILDER_HOME}" -s "/bin/${BUILDER_SHELL}" \
    -m -o "${BUILDER_NAME}" \
    && mkdir -p "${BUILDER_HOME}" \
    && chmod -R 750 "${BUILDER_HOME}" \
    && chown -R "${BUILDER_UID}:${BUILDER_GID}" "${BUILDER_HOME}" \
    # Install AUR package manager
    && ARCH_AUR_PKG_SNAPSHOP_URL="https://aur.archlinux.org/cgit/aur.git/snapshot/${PACKAGE_MANAGER}.tar.gz" \
    && ARCH_AUR_PKG_SNAPSHOP_FILENAME="/tmp/${ARCH_AUR_PKG_SNAPSHOP_URL##*/}" \
    && ARCH_AUR_PKG_SNAPSHOP_PKGDIR="${ARCH_AUR_PKG_SNAPSHOP_FILENAME%%.*}" \
    && curl -s "${ARCH_AUR_PKG_SNAPSHOP_URL}" -o "${ARCH_AUR_PKG_SNAPSHOP_FILENAME}" \
    && tar -x -C "$(dirname "${ARCH_AUR_PKG_SNAPSHOP_PKGDIR}")" -f "${ARCH_AUR_PKG_SNAPSHOP_FILENAME}" \
    && pushd "${ARCH_AUR_PKG_SNAPSHOP_PKGDIR}" \
    && chown -R "${BUILDER_UID}:${BUILDER_GID}" . \
    && pacman -S --needed --noconfirm ${PACKAGE_MANAGER_DEPENDENCIES} \
    && su "${BUILDER_NAME}" bash -c 'makepkg -s' \
    && pacman -U --noconfirm ./*.pkg.tar.zst \
    && popd \
    && rm -rf "${ARCH_AUR_PKG_SNAPSHOP_FILENAME}" "${ARCH_AUR_PKG_SNAPSHOP_PKGDIR}" \
    # Allow passwordless sudo command
    && echo "builder ALL=(ALL) NOPASSWD: ALL" | sudo tee /etc/sudoers.d/10-wheel-builder \
    && chmod 440 /etc/sudoers.d/10-wheel-builder \
    # Cleanup
    && pacman -Scc --noconfirm \
    && rm -r /var/lib/pacman/sync/*
ARG PACKAGE_MANAGER_INSTALL="${PACKAGE_MANAGER} -Sy --noconfirm"
USER builder

# Install core dependencies
RUN ${PACKAGE_MANAGER_INSTALL} --needed \
    lib32-vulkan-icd-loader \
    libglvnd \
    mesa \
    pipewire \
    vulkan-icd-loader \
    wireplumber \
    wmctrl \
    xdotool \
    xorg-xprop \
    xorg-xset \
    # Cleanup
    && "${PACKAGE_MANAGER}" -Scc --noconfirm \
    && sudo rm -r /var/lib/pacman/sync/*

# Install init program
ADD ./systemd/vine-desktop.service "/usr/lib/systemd/system/vine-desktop.service"
ARG INIT_JOURNALCTL_URL="https://raw.githubusercontent.com/gdraheim/docker-systemctl-replacement/master/files/docker/journalctl3.py"
ARG INIT_SYSTEMCTL_URL="https://raw.githubusercontent.com/gdraheim/docker-systemctl-replacement/master/files/docker/systemctl3.py"
RUN ${PACKAGE_MANAGER_INSTALL} --needed \
    curl \
    procps \
    python3 \
    systemd-sysvcompat \
    && curl -s "${INIT_JOURNALCTL_URL}" -o '/usr/bin/journalctl' \
    && curl -s "${INIT_SYSTEMCTL_URL}" -o '/usr/bin/systemctl' \
    && rm -rf '/etc/systemd/system/multi-user.target.wants' \
    && mkdir -p '/etc/systemd/system/multi-user.target.wants' \
    && ln -sf \
    '/usr/lib/systemd/system/vine-desktop.service' \
    '/etc/systemd/system/multi-user.target.wants/vine-desktop.service' \
    && mkdir -p '/opt/scripts' \
    && echo 'sleep infinity' >'/opt/scripts/entrypoint-desktop.sh' \
    && chmod a+x /opt/scripts/* \
    # Remove unneeded systemd targets
    && cd /lib/systemd/system/sysinit.target.wants/ \
    ; for i in *; do \
    [ $i == systemd-tmpfiles-setup.service ] || sudo rm -f $i ; done \
    && sudo rm -f \
    /lib/systemd/system/multi-user.target.wants/* \
    /etc/systemd/system/*.wants/* \
    /lib/systemd/system/local-fs.target.wants/* \
    /lib/systemd/system/sockets.target.wants/*udev* \
    /lib/systemd/system/sockets.target.wants/*initctl* \
    /lib/systemd/system/basic.target.wants/* \
    /lib/systemd/system/anaconda.target.wants/* \
    # Cleanup
    && "${PACKAGE_MANAGER}" -Scc --noconfirm \
    && sudo rm -r /var/lib/pacman/sync/*

# Install locale dependencies
RUN ${PACKAGE_MANAGER_INSTALL} \
    glibc \
    && echo 'en_US.UTF-8 UTF-8' | sudo tee /etc/locale.gen \
    && echo 'ko_KR.EUC-KR EUC-KR' | sudo tee /etc/locale.gen \
    && echo 'ko_KR.UTF-8 UTF-8' | sudo tee /etc/locale.gen \
    && sudo locale-gen \
    && echo 'LANG=en_US.UTF-8' | sudo tee /etc/locale.conf \
    && echo 'LC_ADDRESS=ko_KR.UTF-8' | sudo tee -a /etc/locale.conf \
    && echo 'LC_COLLATE=ko_KR.UTF-8' | sudo tee -a /etc/locale.conf \
    && echo 'LC_CTYPE=ko_KR.UTF-8' | sudo tee -a /etc/locale.conf \
    && echo 'LC_IDENTIFICATION=ko_KR.UTF-8' | sudo tee -a /etc/locale.conf \
    && echo 'LC_MEASUREMENT=ko_KR.UTF-8' | sudo tee -a /etc/locale.conf \
    && echo 'LC_MESSAGES=ko_KR.UTF-8' | sudo tee -a /etc/locale.conf \
    && echo 'LC_MONETARY=ko_KR.UTF-8' | sudo tee -a /etc/locale.conf \
    && echo 'LC_NAME=ko_KR.UTF-8' | sudo tee -a /etc/locale.conf \
    && echo 'LC_NUMERIC=ko_KR.UTF-8' | sudo tee -a /etc/locale.conf \
    && echo 'LC_PAPER=ko_KR.UTF-8' | sudo tee -a /etc/locale.conf \
    && echo 'LC_TELEPHONE=ko_KR.UTF-8' | sudo tee -a /etc/locale.conf \
    && echo 'LC_TIME=ko_KR.UTF-8' | sudo tee -a /etc/locale.conf \
    # Cleanup
    && "${PACKAGE_MANAGER}" -Scc --noconfirm \
    && sudo rm -r /var/lib/pacman/sync/*

# Install AI dev core dependencies
RUN ${PACKAGE_MANAGER_INSTALL} --needed \
    ffmpeg \
    gstreamer \
    gst-libav \
    gst-plugins-bad \
    gst-plugins-base-libs \
    gst-plugins-good \
    gst-plugins-ugly \
    gst-rtsp-server \
    json-glib \
    opencv \
    openssl \
    util-linux-libs \
    yaml-cpp \
    # Environment Variables Configuration
    && echo '# NVIDIA CUDA binary path registration' | sudo tee /etc/profile.d/path-nvidia-cuda-bin.sh \
    && echo '# NVIDIA CUDA library path registration' | sudo tee /etc/ld.so.conf.d/900-nvidia-cuda.conf \
    && for cuda_home in /usr/local/cuda\-[0-9]*.[0-9]*; do true \
    && echo "export PATH=\${PATH}:${cuda_home}/bin" | sudo tee -a /etc/profile.d/path-nvidia-cuda-bin.sh \
    && echo "${cuda_home}/lib" | sudo tee -a /etc/ld.so.conf.d/900-nvidia-cuda.conf \
    && echo "${cuda_home}/lib64" | sudo tee -a /etc/ld.so.conf.d/900-nvidia-cuda.conf \
    ; done \
    && sudo ldconfig \
    # Cleanup
    && "${PACKAGE_MANAGER}" -Scc --noconfirm \
    && sudo rm -r /var/lib/pacman/sync/*

# Install development environment dependencies
RUN ${PACKAGE_MANAGER_INSTALL} --needed \
    binutils \
    crun \
    fakeroot \
    fuse-overlayfs \
    gcc \
    git \
    go \
    kubectl \
    llvm \
    make \
    nano \
    nodejs \
    openssh \
    patch \
    pciutils \
    podman-docker \
    python \
    python-pip \
    screen \
    sudo \
    "${USER_SHELL}" \
    vim \
    wget \
    zip \
    # Allow passwordless sudo command
    && if [ "x${USER_SUDO}" == "xtrue" ]; then \
    echo "${USER_NAME} ALL=(ALL) NOPASSWD: ALL" | sudo tee /etc/sudoers.d/10-wheel \
    && sudo chmod 440 /etc/sudoers.d/10-wheel \
    ; fi \
    # Docker (Podman) Configuration
    && sudo chmod u+s /usr/bin/newuidmap /usr/bin/newgidmap \
    && sudo systemctl enable podman \
    && sudo touch /etc/containers/nodocker \
    ## chmod containers.conf and adjust storage.conf to enable Fuse storage.
    && sudo sed -i \
    -e 's|^#mount_program|mount_program|g' \
    -e '/additionalimage.*/a "/var/lib/shared",' \
    -e 's|^mountopt[[:space:]]*=.*$|mountopt = "nodev,fsync=0"|g' \
    /etc/containers/storage.conf \
    && sudo mkdir -p \
    /var/lib/shared/overlay-images \
    /var/lib/shared/overlay-layers \
    /var/lib/shared/vfs-images \
    /var/lib/shared/vfs-layers \
    && sudo touch /var/lib/shared/overlay-images/images.lock \
    && sudo touch /var/lib/shared/overlay-layers/layers.lock \
    && sudo touch /var/lib/shared/vfs-images/images.lock \
    && sudo touch /var/lib/shared/vfs-layers/layers.lock \
    ## generate a CDI specification that refers to all NVIDIA devices
    && sudo mkdir -p /etc/cdi/ \
    && sudo chown -R "${USER_UID}:${USER_GID}" /etc/cdi/ \
    # Environment Variables Configuration
    && echo '# local binary path registration' | sudo tee /etc/profile.d/path-local-bin.sh \
    && echo 'export PATH=${PATH}:/usr/local/bin' | sudo tee -a /etc/profile.d/path-local-bin.sh \
    && echo 'export PATH=${PATH}:/opt/bin' | sudo tee -a /etc/profile.d/path-local-bin.sh \
    && sudo ln -sf /usr/local/bin /opt/bin \
    && echo '# local library path registration' | sudo tee /etc/ld.so.conf.d/100-path-local-lib.conf \
    && echo '/usr/local/lib' | sudo tee -a /etc/ld.so.conf.d/100-path-local-lib.conf \
    && echo '/usr/local/lib64' | sudo tee -a /etc/ld.so.conf.d/100-path-local-lib.conf \
    && sudo ldconfig \
    # Cleanup
    && "${PACKAGE_MANAGER}" -Scc --noconfirm \
    && sudo rm -r /var/lib/pacman/sync/*

# Install desktop environment dependencies
RUN ${PACKAGE_MANAGER_INSTALL} --needed \
    blueman \
    bluez \
    code \
    file-roller \
    gnome-bluetooth \
    ibus-hangul \
    networkmanager \
    network-manager-applet \
    nm-connection-editor \
    picom \
    plank \
    s3fs-fuse \
    sqlite \
    thunar thunar-archive-plugin thunar-volman \
    tumbler \
    xdg-dbus-proxy \
    xdg-utils \
    xfce4-appfinder xfce4-notifyd xfce4-panel xfce4-pulseaudio-plugin \
    xfce4-session xfce4-settings xfce4-terminal \
    xfconf xfdesktop xfwm4 \
    xmlstarlet \
    # Cleanup
    && "${PACKAGE_MANAGER}" -Scc --noconfirm \
    && sudo rm -r /var/lib/pacman/sync/*

# Install internet browsers
RUN ${PACKAGE_MANAGER_INSTALL} --needed \
    firefox \
    google-chrome \
    # Cleanup
    && "${PACKAGE_MANAGER}" -Scc --noconfirm \
    && sudo rm -r /var/lib/pacman/sync/*

# Install utility
RUN ${PACKAGE_MANAGER_INSTALL} --needed \
    # Games (Lutris)
    lib32-gnutls \
    lib32-mesa \
    lib32-vulkan-mesa-layers \
    lib32-vulkan-swrast \
    lutris \
    python-certifi \
    python-distro \
    python-gobject \
    python-lxml \
    python-pillow \
    python-pyyaml \
    python-requests \
    steam-native-runtime \
    vulkan-mesa-layers \
    vulkan-swrast \
    webkit2gtk \
    wine \
    winetricks \
    # Cleanup
    && "${PACKAGE_MANAGER}" -Scc --noconfirm \
    && sudo rm -r /var/lib/pacman/sync/*

# Install utilities - Custom
ARG ADDONS_HOME="/opt/openark/vdi/desktop"
ADD ./addons "${ADDONS_HOME}"
RUN sudo chmod -R a+x "${ADDONS_HOME}/bin" \
    && for file in ${ADDONS_HOME}/share/applications/*.desktop; do true \
    && sudo ln -s "${file}" "/usr/share/applications/$(basename "${file}")" \
    ; done \
    && for file in ${ADDONS_HOME}/share/autostart/*.desktop; do true \
    && sudo ln -s "${file}" "/etc/xdg/autostart/$(basename "${file}")" \
    ; done

# Install utilities - Podman
ARG PODMAN_REPO="https://raw.githubusercontent.com/containers/libpod/master/contrib/podmanimage/stable"
ADD "${PODMAN_REPO}/containers.conf" /etc/containers/containers.conf
ADD "${PODMAN_REPO}/podman-containers.conf" /etc/containers/podman-containers.conf
ENV _CONTAINERS_USERNS_CONFIGURED=""
RUN sudo chmod 644 \
    /etc/containers/containers.conf \
    /etc/containers/podman-containers.conf

# Add firefox preferences
ADD ./browser/firefox/autoconfig.js /usr/lib64/firefox/defaults/pref/
ADD ./browser/firefox/firefox.cfg /usr/lib64/firefox/

# Add read-only shared directory
RUN sudo mkdir -p /opt/public/ \
    && sudo chown -R "${USER_UID}:${USER_GID}" /opt/public/

# Add scripts
ADD ./scripts /opt/scripts/
RUN sudo chmod 0555 /opt/scripts/*

# Add a user
RUN sudo ldconfig \
    && sudo groupadd -g "${USER_GID}" -o "${USER_NAME}" \
    && sudo useradd -u "${USER_UID}" -g "${USER_GID}" -G "audio,input,render,video" \
    -s "/bin/${USER_SHELL}" -m -o "${USER_NAME}" \
    && echo -e "${USER_UID}:2001:65535" | sudo tee /etc/subuid \
    && echo -e "${USER_GID}:2001:65535" | sudo tee /etc/subgid
USER "${USER_NAME}"
WORKDIR "/home/${USER_NAME}"
