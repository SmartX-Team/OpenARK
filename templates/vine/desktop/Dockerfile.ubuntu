# Copyright (c) 2023 Ho Kim (ho.kim@ulagbulag.io). All rights reserved.
# Use of this source code is governed by a GPL-3-style license that can be
# found in the LICENSE file.

# Configure environment variables
ARG DEBIAN_IMAGE="docker.io/library/ubuntu"
ARG DEBIAN_IMAGE_VERSION="24.04"

# Configure user-specific environment variables
ARG USER_GID="2000"
ARG USER_NAME="user"
ARG USER_SHELL="zsh"
ARG USER_SUDO="true"
ARG USER_UID="2000"

# Be ready for serving
FROM "${DEBIAN_IMAGE}:${DEBIAN_IMAGE_VERSION}" as server

# Load user-specific environment variables
ARG USER_GID
ARG USER_NAME
ARG USER_SHELL
ARG USER_SUDO
ARG USER_UID

ENV SHELL="${USER_SHELL}"
ENV USER_SHELL="${USER_SHELL}"

# Package Manager Configuration
ARG DEBIAN_FRONTEND='noninteractive'

# SystemD Configuration
ENV container docker
STOPSIGNAL SIGRTMIN+3

# Client Configuration
WORKDIR /root/
ENTRYPOINT [ "/usr/bin/env" ]
CMD [ "/usr/bin/systemctl", "init", "vine-desktop.service", "--user" ]

# Volumes Configuration
## home.user
VOLUME [ "/home/${USER_NAME}" ]

# Configure OS-specific settings
RUN true \
    # Fix base image bugs
    ## NVIDIA
    ### Fix library link issue (duplicated library binaries)
    && ( which find >/dev/null \
    && /sbin/ldconfig.real 2>&1 | grep -Po '/usr/local/lib/lib[a-z0-9_.]+' | xargs rm -f \
    && /sbin/ldconfig.real ) \
    || true \
    # Configure package manager
    && dst='/etc/apt/apt.conf.d/docker-minimal' \
    && echo 'APT::Install-Recommends "false";' >"${dst}" \
    && echo 'APT::Install-Suggests "false";' >>"${dst}" \
    # Install base dependencies
    && apt-get update && apt-get install -y \
    ca-certificates \
    curl \
    gettext-base \
    gnupg \
    openssl \
    # Enable multiarch support
    && if test "X$(uname -m)" = 'Xx86_64'; then dpkg --add-architecture 'i386'; fi \
    # Cleanup
    && apt-get clean all \
    && rm -rf /var/lib/apt/lists/*

# Add core repositories
ADD ./apt/keyrings/* /etc/apt/keyrings/
ADD ./apt/sources.list.d/*.list /etc/apt/sources.list.d/
RUN true \
    # Get the latest kubernetes informations
    && export KUBERNETES_VERSION="$( \
    curl -s "https://api.github.com/repos/kubernetes/kubernetes/releases/latest" \
    | grep -Po '"tag_name": +"v\K[0-9]+\.[0-9]+' \
    )" \
    # Get OS informations
    && . /etc/os-release \
    && export ARCH="$(uname -m)" \
    && export VERSION_CODENAME="${VERSION_CODENAME}" \
    && export VERSION_ID="${VERSION_ID}" \
    && export VERSION_ID_MAJOR="${VERSION_ID%\.[0-9]*}" \
    && export VERSION_ID_MINOR="${VERSION_ID#[0-9]*\.}" \
    # Update keyrings
    && find /etc/apt/keyrings/ -type f -exec sh -c \
    'cat "{}" | gpg --dearmor --yes -o "/etc/apt/keyrings/$(basename "{}")"' \; \
    # Update repositories
    && find /etc/apt/sources.list.d/ -type f -exec sh -c \
    'mv "{}" "{}.bak" && envsubst < "{}.bak" >"{}" && rm "{}".bak' \; \
    # Cleanup
    && apt-get clean all \
    && rm -rf /var/lib/apt/lists/*

# Install core dependencies
RUN apt-get update && apt-get install -y \
    apt-transport-https \
    apt-utils \
    curl \
    dbus-user-session \
    dialog \
    fancontrol \
    gpg \
    i2c-tools \
    libhwloc-dev \
    libldacbt-abr2 \
    libldacbt-enc2 \
    libosmesa6 \
    libpipewire-0.3-common \
    libspa-0.2-bluetooth \
    libvulkan1 \
    lm-sensors \
    mesa-utils \
    pciutils \
    pipewire \
    pipewire-audio-client-libraries \
    pipewire-media-session- \
    pipewire-pulse \
    pulseaudio-module-bluetooth- \
    read-edid \
    vulkan-icd \
    wireplumber \
    wmctrl \
    x11-utils \
    xdotool \
    zsh \
    # DBus Configuration
    && sed -i '/^root \+messagebus .*$/ d' /var/lib/dpkg/statoverride \
    # Cleanup
    && apt-get clean all \
    && rm -rf /var/lib/apt/lists/*

# Install locale dependencies
RUN apt-get update && apt-get install -y \
    language-pack-ko \
    locales \
    # Set default locale
    && locale-gen --purge en_US.UTF-8 \
    && echo 'LANG="en_US.UTF-8"' >/etc/default/locale \
    && echo 'LANGUAGE="en_US:en"' >>/etc/default/locale \
    # Cleanup
    && apt-get clean all \
    && rm -rf /var/lib/apt/lists/*

# Install development environment dependencies
RUN apt-get update && apt-get install -y \
    bash-completion \
    "$(apt-cache search '^clang-[0-9]+$' \
    | awk '{print $1}' \
    | sort -r \
    | head -n 1 \
    )" \
    crun \
    dnsutils \
    fuse-overlayfs \
    git \
    iptables \
    iputils-ping \
    kubectl \
    mold \
    nano \
    nodejs \
    nvidia-container-toolkit-base \
    openssh-client \
    pciutils \
    podman-docker \
    python3 \
    python3-pip \
    screen \
    slirp4netns \
    sudo \
    uidmap \
    "${USER_SHELL}" \
    vim \
    wget \
    zip \
    zsh-autosuggestions \
    zsh-completions \
    zsh-syntax-highlighting \
    # Allow passwordless sudo command
    && test "x${USER_SUDO}" = "xtrue" \
    && echo "${USER_NAME} ALL=(ALL) NOPASSWD: ALL" >/etc/sudoers.d/10-wheel \
    && chmod 440 /etc/sudoers.d/10-wheel \
    # Docker (Podman) Configuration
    && chmod u+s /usr/bin/newuidmap /usr/bin/newgidmap \
    && systemctl enable podman \
    && touch /etc/containers/nodocker \
    ## chmod containers.conf and adjust storage.conf to enable Fuse storage.
    && mkdir -p /etc/containers/ \
    && echo '[storage]' >/etc/containers/storage.conf \
    && echo 'driver = "overlay"' >>/etc/containers/storage.conf \
    && echo 'runroot = "/run/containers/storage"' >>/etc/containers/storage.conf \
    && echo 'graphroot = "/var/lib/containers/storage"' >>/etc/containers/storage.conf \
    && echo '[storage.options]' >>/etc/containers/storage.conf \
    && echo 'additionalimagestores = [' >>/etc/containers/storage.conf \
    && echo '"/var/lib/shared",' >>/etc/containers/storage.conf \
    && echo ']' >>/etc/containers/storage.conf \
    && echo 'pull_options = {enable_partial_images = "false", use_hard_links = "false", ostree_repos=""}' >>/etc/containers/storage.conf \
    && echo '[storage.options.overlay]' >>/etc/containers/storage.conf \
    && echo 'mount_program = "/usr/bin/fuse-overlayfs"' >>/etc/containers/storage.conf \
    && echo 'mountopt = "nodev,fsync=0"' >>/etc/containers/storage.conf \
    && echo '[storage.options.thinpool]' >>/etc/containers/storage.conf \
    && mkdir -p \
    /var/lib/shared/overlay-images \
    /var/lib/shared/overlay-layers \
    /var/lib/shared/vfs-images \
    /var/lib/shared/vfs-layers \
    && touch /var/lib/shared/overlay-images/images.lock \
    && touch /var/lib/shared/overlay-layers/layers.lock \
    && touch /var/lib/shared/vfs-images/images.lock \
    && touch /var/lib/shared/vfs-layers/layers.lock \
    ## generate a CDI specification that refers to all NVIDIA devices
    && mkdir -p /etc/cdi/ \
    && chown -R "${USER_UID}:${USER_GID}" /etc/cdi/ \
    # Environment Variables Configuration
    && echo '# local binary path registration' >/etc/profile.d/path-local-bin.sh \
    && echo 'export PATH=${PATH}:/usr/games' >>/etc/profile.d/path-local-bin.sh \
    && echo 'export PATH=${PATH}:/usr/local/bin' >>/etc/profile.d/path-local-bin.sh \
    && echo 'export PATH=${PATH}:/opt/bin' >>/etc/profile.d/path-local-bin.sh \
    && ln -sf /usr/local/bin /opt/bin \
    && echo '# local library path registration' >/etc/ld.so.conf.d/100-path-local-lib.conf \
    && echo '/usr/local/lib' >>/etc/ld.so.conf.d/100-path-local-lib.conf \
    && echo '/usr/local/lib64' >>/etc/ld.so.conf.d/100-path-local-lib.conf \
    # SystemD Configuration
    && chmod u+x /usr/bin/systemctl \
    # Cleanup
    && apt-get clean all \
    && rm -rf /var/lib/apt/lists/*
ENV PATH="${PATH}:/usr/games:/usr/local/bin:/opt/bin"

# Install desktop environment dependencies
# ARG IME_NIMF_INPUTS="nimf-anthy nimf-libhangul nimf-m17n nimf-rime"
ARG NIMF_INPUTS="nimf-libhangul"
RUN apt-get update && apt-get install -y \
    blueman \
    bluez \
    chktex \
    code \
    dbus-x11 \
    file-roller \
    fonts-noto \
    fonts-noto-cjk-extra \
    fonts-noto-color-emoji \
    fonts-noto-extra \
    fonts-noto-mono \
    fonts-noto-ui-core \
    fonts-noto-ui-extra \
    fonts-noto-unhinted \
    gnome-bluetooth \
    gvfs \
    latexmk \
    libnimf1 \
    libnotify-bin \
    libreoffice libreoffice-gtk3 \
    network-manager network-manager-gnome \
    nimf nimf-dev ${NIMF_INPUTS} \
    pavucontrol \
    picom \
    plank \
    s3fs \
    sqlite3 \
    ssh-askpass \
    texlive-full \
    thunar thunar-archive-plugin thunar-volman \
    trash-cli \
    tumbler \
    xdg-dbus-proxy xdg-desktop-portal-gtk xdg-user-dirs \
    xfce4-appfinder xfce4-notifyd xfce4-panel xfce4-pulseaudio-plugin \
    xfce4-session xfce4-settings xfce4-terminal \
    xfconf xfdesktop4 xfwm4 \
    xmlstarlet \
    zenity \
    # Link default system-wide font config
    && ln -sf "/home/${USER_NAME}/.config/fontconfig/conf.d/99-openark.conf" /etc/fonts/conf.d/99-openark.conf \
    && rm -f /etc/fonts/conf.d/65-nonlatin.conf \
    # Remove confliected repositories
    && rm /etc/apt/sources.list.d/microsoft.list \
    # Cleanup
    && apt-get clean all \
    && rm -rf /var/lib/apt/lists/*

# Install init program
ADD ./systemd/vine-desktop.service "/usr/lib/systemd/user/vine-desktop.service"
ARG INIT_JOURNALCTL_URL="https://raw.githubusercontent.com/gdraheim/docker-systemctl-replacement/master/files/docker/journalctl3.py"
ARG INIT_SYSTEMCTL_URL="https://raw.githubusercontent.com/gdraheim/docker-systemctl-replacement/master/files/docker/systemctl3.py"
RUN apt-get update && apt-get install -y \
    curl \
    procps \
    python3 \
    && curl -s "${INIT_JOURNALCTL_URL}" -o '/usr/bin/journalctl' \
    && curl -s "${INIT_SYSTEMCTL_URL}" -o '/usr/bin/systemctl' \
    && rm -rf '/etc/systemd/system/multi-user.target.wants' \
    && mkdir -p '/etc/systemd/system/multi-user.target.wants' \
    && ln -sf \
    '/usr/lib/systemd/user/vine-desktop.service' \
    '/etc/systemd/user/default.target.wants/vine-desktop.service' \
    && mkdir -p '/opt/scripts' \
    && echo 'sleep infinity' >'/opt/scripts/entrypoint-desktop.sh' \
    && chmod a+x /opt/scripts/* \
    # Cleanup
    && apt-get clean all \
    && rm -rf /var/lib/apt/lists/*

# Install internet browsers, mail client, remote desktop, etc
RUN apt-get update && apt-get install -y \
    firefox \
    google-chrome-stable \
    rdesktop \
    thunderbird \
    # Cleanup
    && apt-get clean all \
    && rm -rf /var/lib/apt/lists/*

# Install AI dev dependencies
ARG DEEPSTREAM_REFERENCES_REPO_URL="https://github.com/NVIDIA-AI-IOT/deepstream_reference_apps.git"
ARG DEEPSTREAM_URL_DOWNLOAD="https://api.ngc.nvidia.com/v2/resources/nvidia/deepstream/versions"
ARG DEEPSTREAM_VERSION_MAJOR="6"
ARG DEEPSTREAM_VERSION_MINOR="4"
ARG DEEPSTREAM_VERSION_PATCH="0"
ARG DEEPSTREAM_VERSION_URL="https://raw.githubusercontent.com/NVIDIA-AI-IOT/deepstream_dockers/main/common/version"
RUN apt-get update && apt-get install -y \
    gstreamer1.0-alsa \
    gstreamer1.0-gl \
    gstreamer1.0-gtk3 \
    gstreamer1.0-libav \
    gstreamer1.0-pipewire \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-plugins-base \
    gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-ugly \
    gstreamer1.0-pulseaudio \
    gstreamer1.0-qt5 \
    gstreamer1.0-tools \
    gstreamer1.0-vaapi \
    gstreamer1.0-x \
    libgles2-mesa-dev \
    libgstreamer1.0-dev \
    libgstreamer-plugins-base1.0-dev \
    libgstrtspserver-1.0 \
    libjansson4 \
    libssl-dev \
    libyaml-cpp-dev \
    # FIXME: Waiting for fixing TensorRT release issue: https://github.com/NVIDIA/TensorRT/issues/3774
    libnvinfer-dev="8.6.1.6-1+cuda12.0" \
    libnvinfer-headers-dev="8.6.1.6-1+cuda12.0" \
    libnvinfer-headers-plugin-dev="8.6.1.6-1+cuda12.0" \
    libnvinfer-plugin-dev="8.6.1.6-1+cuda12.0" \
    libnvonnxparsers-dev="8.6.1.6-1+cuda12.0" \
    # Get the latest version
    && DEEPSTREAM_VERSION="$( \
    curl -s "${DEEPSTREAM_VERSION_URL}" \
    | grep -Po '^version\=\K[0-9\.]+$' \
    )" \
    # Parse the version information
    && DEEPSTREAM_HOME="/opt/nvidia/deepstream/deepstream" \
    && DEEPSTREAM_VERSION_MAJOR="${DEEPSTREAM_VERSION_MAJOR:-"$(echo "${DEEPSTREAM_VERSION}" | awk -F '.' '{print $1}')"}" \
    && DEEPSTREAM_VERSION_MINOR="${DEEPSTREAM_VERSION_MINOR:-"$(echo "${DEEPSTREAM_VERSION}" | awk -F '.' '{print $2}')"}" \
    && DEEPSTREAM_VERSION_PATCH="${DEEPSTREAM_VERSION_PATCH:-"$(echo "${DEEPSTREAM_VERSION}" | awk -F '.' '{print $3}')"}" \
    && DEEPSTREAM_VERSION_RELEASE="${DEEPSTREAM_VERSION_MAJOR}.${DEEPSTREAM_VERSION_MINOR}" \
    && DEEPSTREAM_VERSION_FULL="${DEEPSTREAM_VERSION_RELEASE}.${DEEPSTREAM_VERSION_PATCH}" \
    && DEEPSTREAM_URL_DOWNLOAD="${DEEPSTREAM_URL_DOWNLOAD}/${DEEPSTREAM_VERSION_RELEASE}/files" \
    && DEEPSTREAM_FILE_DOWNLOAD="$( \
    curl -s "${DEEPSTREAM_URL_DOWNLOAD}" \
    | grep -Po "deepstream-${DEEPSTREAM_VERSION_RELEASE}_${DEEPSTREAM_VERSION_FULL}-[0-9]*_$(dpkg --print-architecture).deb" \
    | sort \
    | tail -n1 \
    )" \
    # Download
    && DEEPSTREAM_FILE="/opt/deepstream-sdk.deb" \
    && wget -qO "${DEEPSTREAM_FILE}" "${DEEPSTREAM_URL_DOWNLOAD}/${DEEPSTREAM_FILE_DOWNLOAD}" \
    # Decompress the downloaded file
    && apt-get install -y "${DEEPSTREAM_FILE}" \
    # Install
    && cd "${DEEPSTREAM_HOME}" \
    && sed -i 's/"rhel"/"rocky"/g' ./*.sh \
    && ./install.sh \
    && rm -f *.sh \
    && cd - \
    # Download the latest configuration files
    && DEEPSTREAM_MODELS_DIR="${DEEPSTREAM_HOME}/samples/configs/tao_pretrained_models" \
    && DEEPSTREAM_SAMPLE_HOME="/opt/deepstream_reference_apps" \
    && git clone "${DEEPSTREAM_REFERENCES_REPO_URL}" "${DEEPSTREAM_SAMPLE_HOME}" \
    && cd "${DEEPSTREAM_SAMPLE_HOME}/deepstream_app_tao_configs/" \
    && cp -a * "${DEEPSTREAM_MODELS_DIR}" \
    && cd - \
    # Download the models
    && cd "${DEEPSTREAM_MODELS_DIR}" \
    && ./download_models.sh \
    && cd - \
    # Change permissions for user-level modification
    && chown -R "${USER_UID}:${USER_GID}" "${DEEPSTREAM_HOME}/samples" \
    # Cleanup
    && rm -rf "${DEEPSTREAM_SAMPLE_HOME}" \
    && rm -f "${DEEPSTREAM_FILE}"

# Install utility
RUN apt-get update && apt-get install -y \
    # Games (Lutris)
    libegl1-mesa-dev \
    libglu1-mesa \
    libnsl2 \
    libunwind-dev \
    libvulkan1 \
    libwebkit2gtk-4.1 \
    lutris \
    python3-certifi \
    python3-dbus \
    python3-distro \
    python3-lxml \
    python3-pillow \
    python3-requests \
    python3-yaml \
    steam \
    wine \
    $( if test "X$(uname -m)" = 'Xx86_64'; then echo 'wine32 wine64'; fi ) \
    # Cleanup
    && apt-get clean all \
    && rm -rf /var/lib/apt/lists/*

# Install utility - WINE staging
ARG WINE_REPO="https://github.com/Kron4ek/Wine-Builds/releases/download"
RUN true \
    # Get the latest version
    ## ARCH
    && case "$(uname -m)" in \
    'i386') \
    WINE_ARCH='x86' \
    ;; \
    'x86_64') \
    WINE_ARCH='amd64' \
    ;; \
    *) \
    echo "Unsupported WINE Architechure: '$(uname -m)'" \
    exit 1 \
    ;; \
    esac \
    && WINE_VERSION="9.2" \
    # Download
    && WINE_OBJ_NAME="wine-${WINE_VERSION}-staging-tkg-${WINE_ARCH}" \
    && WINE_OBJ_FILENAME="${WINE_OBJ_NAME}.tar.xz" \
    && WINE_OBJ_FILE="${WINE_OBJ_FILENAME}" \
    && WINE_TMP="/opt/${WINE_OBJ_NAME}" \
    && wget -qO "${WINE_OBJ_FILE}" "${WINE_REPO}/${WINE_VERSION}/${WINE_OBJ_FILENAME}" \
    # Decompress the downloaded file
    && tar -x -C "$(dirname "${WINE_TMP}")" -f "${WINE_OBJ_FILE}" \
    && tar -cf - -C "${WINE_TMP}" . | tar -xf - -C '/usr' \
    # Cleanup
    && rm -rf "${WINE_OBJ_FILE}" "${WINE_TMP}"

# Install utilities - Custom
ARG ADDONS_HOME="/opt/openark/vdi/desktop"
ADD ./addons "${ADDONS_HOME}"
RUN chmod -R a+x "${ADDONS_HOME}/bin" \
    && for file in ${ADDONS_HOME}/share/applications/*.desktop; do true \
    && ln -s "${file}" "/usr/share/applications/$(basename "${file}")" \
    ; done \
    && for file in ${ADDONS_HOME}/share/autostart/*.desktop; do true \
    && ln -s "${file}" "/etc/xdg/autostart/$(basename "${file}")" \
    ; done

# Install utilities - Podman
ARG PODMAN_REPO="https://raw.githubusercontent.com/containers/image_build/main/podman"
ADD "${PODMAN_REPO}/containers.conf" /etc/containers/containers.conf
ADD "${PODMAN_REPO}/podman-containers.conf" /etc/containers/podman-containers.conf
ENV _CONTAINERS_USERNS_CONFIGURED=""
RUN chmod 644 \
    /etc/containers/containers.conf \
    /etc/containers/podman-containers.conf

# Add firefox preferences
ADD ./browser/firefox/autoconfig.js /usr/lib64/firefox/defaults/pref/
ADD ./browser/firefox/firefox.cfg /usr/lib64/firefox/

# Add read-only shared directory
RUN mkdir -p /opt/public/ \
    && chown -R "${USER_UID}:${USER_GID}" /opt/public/

# Add scripts
ADD ./scripts /opt/scripts/
RUN chmod 0555 /opt/scripts/*

# Add a user
RUN /sbin/ldconfig.real \
    && groupadd -g "${USER_GID}" -o "${USER_NAME}" \
    && useradd -u "${USER_UID}" -g "${USER_GID}" -G "audio,cdrom,input,render,video" \
    -s "/bin/${USER_SHELL}" -m -o "${USER_NAME}" \
    && printf "${USER_UID}:2001:65535" > /etc/subuid \
    && printf "${USER_GID}:2001:65535" > /etc/subgid
USER "${USER_NAME}"
WORKDIR "/home/${USER_NAME}"
