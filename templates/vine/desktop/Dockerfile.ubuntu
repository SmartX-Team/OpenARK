# Copyright (c) 2023 Ho Kim (ho.kim@ulagbulag.io). All rights reserved.
# Use of this source code is governed by a GPL-3-style license that can be
# found in the LICENSE file.

# Configure environment variables
ARG DEBIAN_IMAGE="docker.io/library/ubuntu"
ARG DEBIAN_IMAGE_VERSION="24.04"

# Configure user-specific environment variables
ARG USER_GID="2000"
ARG USER_NAME="user"
ARG USER_SHELL="zsh"
ARG USER_SUDO="true"
ARG USER_UID="2000"

# Be ready for serving
FROM "${DEBIAN_IMAGE}:${DEBIAN_IMAGE_VERSION}" AS server

# Load user-specific environment variables
ARG USER_GID
ARG USER_NAME
ARG USER_SHELL
ARG USER_SUDO
ARG USER_UID

ENV SHELL="${USER_SHELL}"
ENV USER_SHELL="${USER_SHELL}"
ENV XDG_RUNTIME_DIR="/run/user/${USER_UID}"

# Package Manager Configuration
ARG DEBIAN_FRONTEND='noninteractive'

# SystemD Configuration
ENV container=docker
STOPSIGNAL SIGRTMIN+3

# Client Configuration
WORKDIR /root/
ENTRYPOINT [ "/usr/bin/env" ]
CMD [ "/usr/bin/systemctl", "init", "vine-desktop.service", "--user" ]
ENV NVIDIA_DRIVER_CAPABILITIES="all"

# Volumes Configuration
## home.user
VOLUME [ "/home/${USER_NAME}" ]

# Configure OS-specific settings
RUN true \
    # Fix base image bugs
    ## NVIDIA
    ### Fix library link issue (duplicated library binaries)
    && ( which find >/dev/null \
    && /sbin/ldconfig.real 2>&1 | grep -Po '/usr/local/lib/lib[a-z0-9_.]+' | xargs rm -f \
    && /sbin/ldconfig.real ) \
    || true \
    # Install base dependencies
    && apt-get update && apt-get install -y \
    apt-transport-https \
    apt-utils \
    ca-certificates \
    curl \
    gettext-base \
    gnupg \
    openssl \
    software-properties-common \
    # Enable multiarch support
    && if test "X$(uname -m)" = 'Xx86_64'; then dpkg --add-architecture 'i386'; fi \
    # Install apt-fast
    && add-apt-repository -y 'ppa:apt-fast/stable' \
    && apt-get install -y apt-fast \
    && echo debconf apt-fast/aptmanager string apt-get | debconf-set-selections \
    && echo debconf apt-fast/dlflag boolean true | debconf-set-selections \
    && echo debconf apt-fast/maxdownloads string 16 | debconf-set-selections \
    # Cleanup
    && apt-get clean all \
    && rm -rf /var/lib/apt/lists/*

# Configure 3rd-party repositories
ADD ./apt/apt.conf.d/* /etc/apt/apt.conf.d/
ADD ./apt/keyrings/* /etc/apt/keyrings/
ADD ./apt/preferences.d/* /etc/apt/preferences.d/
ADD ./apt/sources.list.d/*.list /etc/apt/sources.list.d/
RUN true \
    # Get the latest kubernetes informations
    && export KUBERNETES_VERSION="$( \
    curl -s "https://api.github.com/repos/kubernetes/kubernetes/releases/latest" \
    | grep -Po '"tag_name": +"v\K[0-9]+\.[0-9]+' \
    )" \
    # Get OS informations
    && . /etc/os-release \
    && export ARCH="$(uname -m)" \
    && export VERSION_CODENAME="${VERSION_CODENAME}" \
    && export VERSION_ID="${VERSION_ID}" \
    && export VERSION_ID_MAJOR="${VERSION_ID%\.[0-9]*}" \
    && export VERSION_ID_MINOR="${VERSION_ID#[0-9]*\.}" \
    # Update keyrings
    && find /etc/apt/keyrings/ -type f -exec sh -c \
    'cat "{}" | gpg --dearmor --yes -o "/etc/apt/keyrings/$(basename "{}")"' \; \
    # Update repositories
    && find /etc/apt/sources.list.d/ -type f -exec sh -c \
    'mv "{}" "{}.bak" && envsubst < "{}.bak" >"{}" && rm "{}".bak' \; \
    # Cleanup
    && apt-get clean all \
    && rm -rf /var/lib/apt/lists/*

# Install init program (SystemD)
ADD ./systemd/vine-desktop.service "/usr/lib/systemd/user/vine-desktop.service"
ARG INIT_JOURNALCTL_URL="https://raw.githubusercontent.com/gdraheim/docker-systemctl-replacement/master/files/docker/journalctl3.py"
ARG INIT_SYSTEMCTL_URL="https://raw.githubusercontent.com/gdraheim/docker-systemctl-replacement/master/files/docker/systemctl3.py"
RUN apt-get update && apt-get install -y \
    curl \
    libseccomp-dev \
    libsystemd-dev \
    procps \
    python3 \
    systemd \
    && curl -s "${INIT_JOURNALCTL_URL}" -o '/usr/bin/journalctl' \
    && curl -s "${INIT_SYSTEMCTL_URL}" -o '/usr/bin/systemctl' \
    && rm -rf '/etc/systemd/system/multi-user.target.wants' \
    && mkdir -p '/etc/systemd/system/multi-user.target.wants' \
    && mkdir -p '/etc/systemd/user/default.target.wants' \
    && ln -sf \
    '/usr/lib/systemd/user/vine-desktop.service' \
    '/etc/systemd/user/default.target.wants/vine-desktop.service' \
    && mkdir -p '/opt/scripts' \
    && echo 'sleep infinity' >'/opt/scripts/entrypoint-desktop.sh' \
    && chmod a+x /opt/scripts/* \
    # SystemD Configuration
    && chmod u+x /usr/bin/journalctl /usr/bin/systemctl \
    # Cleanup
    && apt-get clean all \
    && rm -rf /var/lib/apt/lists/*

# Install locale dependencies
RUN apt-get update && apt-get install -y \
    language-pack-ko \
    locales \
    # Set default locale
    && locale-gen --purge en_US.UTF-8 \
    && echo 'LANG="en_US.UTF-8"' >/etc/default/locale \
    && echo 'LANGUAGE="en_US:en"' >>/etc/default/locale \
    # Cleanup
    && apt-get clean all \
    && rm -rf /var/lib/apt/lists/*

# Install development environment dependencies
RUN apt-get update && apt-get install -y \
    # Core
    bash \
    binutils \
    busybox \
    cmake \
    curl \
    fakeroot \
    findutils \
    libtool \
    just \
    make \
    meson \
    mold \
    nasm \
    pkg-config \
    rclone \
    rsync \
    sudo \
    uidmap \
    "${USER_SHELL}" \
    wget \
    zip \
    # Core (CLI)
    jq \
    yq \
    # Core (Devops, CI/CD)
    git \
    git-lfs \
    # Core (Container)
    containernetworking-plugins \
    crun \
    nvidia-container-toolkit-base \
    podman-docker \
    slirp4netns \
    # Core (Container/Podman)
    aardvark-dns \
    duperemove \
    libassuan-dev \
    libbtrfs-dev \
    libc6-dev \
    libdevmapper-dev \
    netavark \
    # Core (Container/Podman/crun)
    libcap-dev \
    libyajl-dev \
    # Core (Filesystem)
    btrfs-progs \
    fuse-overlayfs \
    libfuse-dev \
    # Core (H/W)
    fancontrol \
    i2c-tools \
    lm-sensors \
    pciutils \
    read-edid \
    # Core (Networking)
    dnsutils \
    gpg \
    iptables \
    iputils-ping \
    libgpgme-dev \
    openssh-client \
    openssh-server \
    # Editor (CLI)
    nano \
    screen \
    vim \
    # Kubernetes
    kubectl \
    # Language-specific (Assembly)
    llvm-dev \
    # Language-specific (C/C++)
    build-essential \
    clang \
    gcc \
    g++ \
    libclang-dev \
    # Language-specific (Go)
    go-md2man \
    golang-go \
    # Language-specific (Mobile/Android)
    #android-build-tools-installer \
    # Language-specific (NPM)
    npm \
    # Language-specific (Java)
    default-jre \
    # Language-specific (Javascript)
    nodejs \
    # Language-specific (Python)
    python3 \
    python3-pip \
    # Language-specific (Rust)
    rustup \
    # Library (GTK)
    libgtk2.0-dev \
    # Library (H/W)
    libhwloc-dev \
    libudev-dev \
    # Library (Networking)
    libprotobuf-dev \
    libprotobuf-c-dev \
    libprotoc-dev \
    libssl-dev \
    protobuf-compiler \
    # Linkers
    mold \
    # Shell Complementary
    bash-completion \
    zsh-autosuggestions \
    zsh-completions \
    zsh-syntax-highlighting \
    # Backup SSH Configuration
    && rm -rf /etc/ssh/ssh_host_* \
    && cp -r /etc/ssh /etc/.ssh \
    # Cleanup
    && apt-get clean all \
    && rm -rf /var/lib/apt/lists/*

# Configure development environment
ARG PODMAN_REPO="https://raw.githubusercontent.com/containers/image_build/main/podman"
ENV _CONTAINERS_USERNS_CONFIGURED=""
RUN true \
    # Allow passwordless sudo command
    && test "x${USER_SUDO}" = "xtrue" \
    && echo "${USER_NAME} ALL=(ALL) NOPASSWD: ALL" >/etc/sudoers.d/10-wheel \
    && chmod 440 /etc/sudoers.d/10-wheel \
    # Docker (Podman) Configuration
    && curl -sL -o '/etc/containers/containers.conf' "${PODMAN_REPO}/containers.conf" \
    && curl -sL -o '/etc/containers/podman-containers.conf' "${PODMAN_REPO}/podman-containers.conf" \
    && chmod 644 '/etc/containers/containers.conf' '/etc/containers/podman-containers.conf' \
    ## Rootless Docker (Podman) Configuration
    && sed -i '/^keyring/ d' /etc/containers/containers.conf \
    && sed -i 's/^\[containers\]/\0\nkeyring=false/g' /etc/containers/containers.conf \
    && sed -i '/^no_pivot_root/ d' /etc/containers/containers.conf \
    && sed -i 's/^\[engine\]/\0\nno_pivot_root=true/g' /etc/containers/containers.conf \
    && chmod u+s /usr/bin/newuidmap /usr/bin/newgidmap \
    && systemctl enable podman \
    && touch /etc/containers/nodocker \
    ## chmod containers.conf and adjust storage.conf to enable Fuse storage.
    && mkdir -p /etc/containers/ \
    && echo '[storage]' >/etc/containers/storage.conf \
    && echo 'driver = "overlay"' >>/etc/containers/storage.conf \
    && echo 'runroot = "/run/containers/storage"' >>/etc/containers/storage.conf \
    && echo 'graphroot = "/var/lib/containers/storage"' >>/etc/containers/storage.conf \
    && echo '[storage.options]' >>/etc/containers/storage.conf \
    && echo 'additionalimagestores = [' >>/etc/containers/storage.conf \
    && echo '"/var/lib/shared",' >>/etc/containers/storage.conf \
    && echo ']' >>/etc/containers/storage.conf \
    && echo 'pull_options = {enable_partial_images = "false", use_hard_links = "false", ostree_repos=""}' >>/etc/containers/storage.conf \
    && echo '[storage.options.overlay]' >>/etc/containers/storage.conf \
    && echo 'mount_program = "/usr/bin/fuse-overlayfs"' >>/etc/containers/storage.conf \
    && echo 'mountopt = "nodev,fsync=0"' >>/etc/containers/storage.conf \
    && echo '[storage.options.thinpool]' >>/etc/containers/storage.conf \
    && mkdir -p \
    /var/lib/shared/overlay-images \
    /var/lib/shared/overlay-layers \
    /var/lib/shared/vfs-images \
    /var/lib/shared/vfs-layers \
    && touch /var/lib/shared/overlay-images/images.lock \
    && touch /var/lib/shared/overlay-layers/layers.lock \
    && touch /var/lib/shared/vfs-images/images.lock \
    && touch /var/lib/shared/vfs-layers/layers.lock \
    ## generate a CDI specification that refers to all NVIDIA devices
    && mkdir -p /etc/cdi/ \
    && chown -R "${USER_UID}:${USER_GID}" /etc/cdi/ \
    # Environment Variables Configuration
    && echo '# local binary path registration' >/etc/profile.d/path-local-bin.sh \
    && echo 'export PATH=${PATH}:/usr/games' >>/etc/profile.d/path-local-bin.sh \
    && echo 'export PATH=${PATH}:/usr/local/bin' >>/etc/profile.d/path-local-bin.sh \
    && echo 'export PATH=${PATH}:/opt/bin' >>/etc/profile.d/path-local-bin.sh \
    && ln -sf /usr/local/bin /opt/bin \
    && echo '# local library path registration' >/etc/ld.so.conf.d/100-path-local-lib.conf \
    && echo '/usr/local/lib' >>/etc/ld.so.conf.d/100-path-local-lib.conf \
    && echo '/usr/local/lib64' >>/etc/ld.so.conf.d/100-path-local-lib.conf
ENV PATH="${PATH}:/usr/games:/usr/local/bin:/opt/bin"

# Install desktop environment dependencies
# ARG IME_NIMF_INPUTS="nimf-anthy nimf-libhangul nimf-m17n nimf-rime"
ARG NIMF_INPUTS="nimf-libhangul"
RUN apt-get update && apt-get install -y \
    # Core
    blueman \
    bluez \
    dialog \
    gvfs \
    libnotify-bin \
    libunwind-dev \
    network-manager \
    picom \
    plank \
    s3cmd \
    s3fs \
    trash-cli \
    tumbler \
    xauth \
    xdg-dbus-proxy xdg-desktop-portal-gtk xdg-user-dirs \
    xmlstarlet \
    zenity \
    # Core (Acceleration)
    libegl1-mesa-dev \
    libgles2-mesa-dev \
    libglu1-mesa \
    libnsl2 \
    libosmesa6 \
    libvulkan1 \
    mesa-utils \
    vulkan-icd \
    vulkan-tools \
    # Core (NVIDIA)
    libnvidia-egl-wayland1 \
    # Core (Audio/PipeWire)
    libldacbt-abr2 libldacbt-enc2 \
    libpipewire-0.3-common \
    libspa-0.2-bluetooth \
    pavucontrol \
    pipewire \
    pipewire-audio-client-libraries \
    pipewire-media-session- \
    pipewire-pulse \
    pulseaudio-module-bluetooth- \
    pulseaudio-utils \
    wireplumber \
    # Core (DBus)
    dbus-user-session \
    # Core (Games)
    gamemode \
    # Core (GTK)
    file-roller \
    gnome-bluetooth \
    libwebkit2gtk-4.1 \
    network-manager-gnome \
    # Core (Python)
    python3-certifi \
    python3-dbus \
    python3-distro \
    python3-lxml \
    python3-pillow \
    python3-requests \
    python3-yaml \
    # Core (Scheduling)
    schedtool \
    # Core (Wayland)
    wayland-protocols \
    # Core (Wayland RDP)
    winpr-utils \
    # Core (Wayland Server)
    weston \
    xwayland \
    # Core (X11)
    dbus-x11 \
    wmctrl \
    x11-utils \
    xdotool \
    # Desktop Environment (Xfce4)
    thunar thunar-archive-plugin thunar-volman \
    xfce4-appfinder xfce4-notifyd xfce4-panel xfce4-pulseaudio-plugin \
    xfce4-screenshooter xfce4-session xfce4-settings xfce4-terminal \
    xfconf xfdesktop4 xfwm4 \
    # Fonts
    fonts-noto \
    fonts-noto-cjk-extra \
    fonts-noto-color-emoji \
    fonts-noto-extra \
    fonts-noto-mono \
    fonts-noto-ui-core \
    fonts-noto-ui-extra \
    fonts-noto-unhinted \
    # Games (Wine)
    lutris \
    steam \
    wine \
    $( if test "X$(uname -m)" = 'Xx86_64'; then echo 'wine32 wine64'; fi ) \
    # GUI Framework (Qt)
    libqt5printsupport5 \
    qtbase5-dev \
    # GStreamer
    gstreamer1.0-alsa \
    gstreamer1.0-gl \
    gstreamer1.0-gtk3 \
    gstreamer1.0-libav \
    gstreamer1.0-pipewire \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-plugins-base \
    gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-ugly \
    gstreamer1.0-pulseaudio \
    gstreamer1.0-qt5 \
    gstreamer1.0-tools \
    gstreamer1.0-vaapi \
    gstreamer1.0-x \
    libges-1.0-dev \
    libgstreamer1.0-dev \
    libgstreamer-plugins-bad1.0-dev \
    libgstreamer-plugins-base1.0-dev \
    libgstrtspserver-1.0-dev \
    # IME (nimf)
    libnimf1 \
    nimf nimf-dev ${NIMF_INPUTS} \
    # Internet Browsers & Applications
    firefox \
    firefox-locale-ko \
    google-chrome-stable \
    rdesktop \
    thunderbird \
    thunderbird-locale-ko \
    # Networking
    nmap \
    traceroute \
    # Office
    chktex \
    latexmk \
    libreoffice libreoffice-gtk3 \
    texlive-full \
    # Printer
    cups-client \
    system-config-printer \
    # Printer - Driver
    cups \
    cups-bsd \
    cups-filters \
    hp-ppd \
    hpijs-ppds \
    hplip \
    openprinting-ppds \
    printer-driver-all \
    printer-driver-cups-pdf \
    # Utility
    sqlite3 \
    ssh-askpass \
    # Virtual Machines
    qemu-system \
    virt-manager \
    virt-viewer \
    # Visual Editors
    android-studio \
    code \
    # DBus Configuration
    && sed -i '/^root \+messagebus .*$/ d' /var/lib/dpkg/statoverride \
    ## blueman-applet
    && sed -i 's/^\( *\)d \= ErrorDialog(/\1raise result\n\0/g' /usr/lib/python3/dist-packages/blueman/plugins/applet/Networking.py \
    # Link default system-wide font config
    && ln -sf "/home/${USER_NAME}/.config/fontconfig/conf.d/99-openark.conf" /etc/fonts/conf.d/99-openark.conf \
    && rm -f /etc/fonts/conf.d/65-nonlatin.conf \
    # Remove conflicted repositories
    && rm -f /etc/apt/sources.list.d/vscode.list \
    # X11 Configuration
    && mkdir -p /tmp/.X11-unix \
    && chmod 777 /tmp/.X11-unix \
    # Cleanup
    && apt-get clean all \
    && rm -rf /var/lib/apt/lists/*

# Install cutting-edge weston (>=14)
ARG WESTON_REPO="https://gitlab.freedesktop.org/wayland/weston.git"
RUN apt-get update && apt-get install -y \
    freerdp2-dev \
    freerdp3-dev \
    gnutls-dev \
    hwdata \
    libdisplay-info-dev \
    libgmp-dev \
    libinput-dev \
    liblcms2-dev \
    libneatvnc-dev \
    libpam-dev \
    libpipewire-0.3-dev \
    libseat-dev \
    libturbojpeg-dev \
    libva-dev \
    libxcb-composite0-dev \
    libxcb-cursor-dev \
    libxcb-xkb-dev \
    nettle-dev \
    # Download
    && WESTON_SRC="/opt/weston" \
    && git clone "${WESTON_REPO}" "${WESTON_SRC}" \
    && cd "${WESTON_SRC}" \
    # Build
    && meson build/ --prefix=/usr \
    && ninja -C build/ install \
    # Cleanup
    && cd - \
    && rm -rf "${WESTON_SRC}" \
    && apt-get clean all \
    && rm -rf /var/lib/apt/lists/*

# Install cutting-edge ananicy
ARG ANANICY_REPO="https://github.com/kuche1/minq-ananicy.git"
RUN apt-get update \
    # Download
    && ANANICY_SRC="/opt/ananicy" \
    && git clone "${ANANICY_REPO}" "${ANANICY_SRC}" \
    && cd "${ANANICY_SRC}" \
    # Build
    && ./package.sh debian \
    && apt-get install -y ./ananicy-*.deb \
    # Cleanup
    && cd - \
    && rm -rf "${ANANICY_SRC}" \
    && apt-get clean all \
    && rm -rf /var/lib/apt/lists/*

# Install cutting-edge podman
ARG CRUN_REPO="https://github.com/containers/crun.git"
ARG CRUN_VERSION="1.15"
ARG PODMAN_REPO="https://github.com/containers/podman.git"
ARG PODMAN_VERSION="5.1"
RUN apt-mark hold crun podman \
    # crun
    ## Download
    && CRUN_SRC="/opt/crun" \
    && git clone "${CRUN_REPO}" "${CRUN_SRC}" -b "${CRUN_VERSION}" \
    && cd "${CRUN_SRC}" \
    ## Build
    && ./autogen.sh \
    && ./configure --enable-shared --prefix=/usr \
    && make \
    && make install \
    # podman
    ## Download
    && PODMAN_SRC="/opt/podman" \
    && git clone "${PODMAN_REPO}" "${PODMAN_SRC}" -b "v${PODMAN_VERSION}" \
    && cd "${PODMAN_SRC}" \
    ## Build
    && make BUILDTAGS='cni seccomp selinux systemd' PREFIX=/usr \
    && make install PREFIX=/usr \
    # Cleanup
    && cd - \
    && rm -rf "${CRUN_SRC}" "${PODMAN_SRC}" \
    && apt-get clean all \
    && rm -rf /var/lib/apt/lists/*

# Install cutting-edge lutris
ARG LUTRIS_VERSION_API="https://api.github.com/repos/lutris/lutris/releases/latest"
RUN apt-get update \
    # Get the latest version
    && LUTRIS_DOWNLOAD_URL="$( \
    curl -s "${LUTRIS_VERSION_API}" \
    | grep -Po '"browser_download_url" *\: *"\K[0-9a-zA-Z/:._-]+' \
    )" \
    # Download
    && LUTRIS_FILE="/tmp/lutris.deb" \
    && curl -sSL -o "${LUTRIS_FILE}" "${LUTRIS_DOWNLOAD_URL}" \
    # Install
    && apt-get install -y "${LUTRIS_FILE}" \
    # Cleanup
    && rm -rf "${LUTRIS_FILE}" \
    && apt-get clean all \
    && rm -rf /var/lib/apt/lists/*

# Install cutting-edge Wine
ARG WINE_REPO="https://github.com/Kron4ek/Wine-Builds/releases/download"
ARG WINE_VERSION_API="https://api.github.com/repos/Kron4ek/Wine-Builds/releases/latest"
RUN apt-mark hold wine \
    # Get the latest version
    ## ARCH
    && case "$(uname -m)" in \
    'i386') \
    WINE_ARCH='x86' \
    ;; \
    'x86_64') \
    WINE_ARCH='amd64' \
    ;; \
    *) \
    echo "Unsupported WINE Architechure: '$(uname -m)'" \
    exit 1 \
    ;; \
    esac \
    && WINE_VERSION="$( \
    curl -s "${WINE_VERSION_API}" \
    | grep -Po '"tag_name": +"\K[0-9.]+' \
    )" \
    # Download
    && WINE_OBJ_NAME="wine-${WINE_VERSION}-staging-tkg-${WINE_ARCH}" \
    && WINE_OBJ_FILENAME="${WINE_OBJ_NAME}.tar.xz" \
    && WINE_OBJ_FILE="${WINE_OBJ_FILENAME}" \
    && WINE_SRC="/opt/${WINE_OBJ_NAME}" \
    && curl -Lo "${WINE_OBJ_FILE}" "${WINE_REPO}/${WINE_VERSION}/${WINE_OBJ_FILENAME}" \
    # Decompress the downloaded file
    && tar -x -C "$(dirname "${WINE_SRC}")" -f "${WINE_OBJ_FILE}" \
    && tar -cf - -C "${WINE_SRC}" . | tar -xf - -C '/usr' \
    # Cleanup
    && rm -rf "${WINE_OBJ_FILE}" "${WINE_SRC}"

# Install AI dev dependencies
RUN apt-get update && apt-get install -y \
    # CUDA
    cuda-toolkit-11-8 \
    # NVIDIA Nsights
    # FIXME: Release hard-coded versions
    nsight-compute-2022.3.0 \
    nsight-systems-2022.4.2 \
    # DeepStream dependencies
    libjansson4 \
    # libyaml-cpp-dev \
    # Version-specific packages
    # FIXME: Waiting for fixing TensorRT release issue: https://github.com/NVIDIA/TensorRT/issues/3774
    libcufft11 \
    libnvinfer-dev="8.6.1.6-1+cuda12.0" \
    libnvinfer-headers-dev="8.6.1.6-1+cuda12.0" \
    libnvinfer-headers-plugin-dev="8.6.1.6-1+cuda12.0" \
    libnvinfer-plugin-dev="8.6.1.6-1+cuda12.0" \
    libnvonnxparsers-dev="8.6.1.6-1+cuda12.0" \
    "$( \
    curl -sL "http://archive.ubuntu.com/ubuntu/pool/main/y/yaml-cpp/libyaml-cpp0.7_0.7.0+dfsg-8build1_amd64.deb" -o '/tmp/libyaml-cpp.deb' \
    && echo '/tmp/libyaml-cpp.deb' \
    )" \
    # Cleanup
    && apt-get clean all \
    && rm -rf /var/lib/apt/lists/*

# Install AI dev dependencies - NVIDIA DeepStream
ARG DEEPSTREAM_REFERENCES_REPO_TAG="DS-6.4"
ARG DEEPSTREAM_REFERENCES_REPO_URL="https://github.com/NVIDIA-AI-IOT/deepstream_reference_apps.git"
ARG DEEPSTREAM_URL_DOWNLOAD="https://api.ngc.nvidia.com/v2/org/nvidia/resources/deepstream/versions"
ARG DEEPSTREAM_VERSION_MAJOR="6"
ARG DEEPSTREAM_VERSION_MINOR="4"
ARG DEEPSTREAM_VERSION_PATCH="0"
ARG DEEPSTREAM_VERSION_URL="https://raw.githubusercontent.com/NVIDIA-AI-IOT/deepstream_dockers/main/common/version"
RUN --mount=type=secret,id=NGC_CLI_API_KEY,env=NGC_CLI_API_KEY \
    apt-get update \
    # Generate a Bearer token
    && TOKEN=$( \
    curl -s -u "\$oauthtoken:${NGC_CLI_API_KEY}" -H 'Accept:application/json' \
    'https://authn.nvidia.com/token?service=ngc&scope=group/ngc' \
    | jq -r '.token' \
    ) \
    # Get the latest version
    && DEEPSTREAM_VERSION="$( \
    curl -s "${DEEPSTREAM_VERSION_URL}" \
    | grep -Po '^version\=\K[0-9\.]+$' \
    )" \
    # Parse the version information
    && DEEPSTREAM_HOME="/opt/nvidia/deepstream/deepstream" \
    && DEEPSTREAM_VERSION_MAJOR="${DEEPSTREAM_VERSION_MAJOR:-"$(echo "${DEEPSTREAM_VERSION}" | awk -F '.' '{print $1}')"}" \
    && DEEPSTREAM_VERSION_MINOR="${DEEPSTREAM_VERSION_MINOR:-"$(echo "${DEEPSTREAM_VERSION}" | awk -F '.' '{print $2}')"}" \
    && DEEPSTREAM_VERSION_PATCH="${DEEPSTREAM_VERSION_PATCH:-"$(echo "${DEEPSTREAM_VERSION}" | awk -F '.' '{print $3}')"}" \
    && DEEPSTREAM_VERSION_RELEASE="${DEEPSTREAM_VERSION_MAJOR}.${DEEPSTREAM_VERSION_MINOR}" \
    && DEEPSTREAM_VERSION_FULL="${DEEPSTREAM_VERSION_RELEASE}.${DEEPSTREAM_VERSION_PATCH}" \
    && DEEPSTREAM_URL_DOWNLOAD="${DEEPSTREAM_URL_DOWNLOAD}/${DEEPSTREAM_VERSION_RELEASE}/files" \
    && DEEPSTREAM_FILE_DOWNLOAD="$( \
    curl -s "${DEEPSTREAM_URL_DOWNLOAD}" \
    --oauth2-bearer "${TOKEN}" \
    | jq -r '.recipeFiles[].path' \
    | grep -Po "deepstream-${DEEPSTREAM_VERSION_RELEASE}_${DEEPSTREAM_VERSION_FULL}-[0-9]*_$(dpkg --print-architecture).deb" \
    | sort -rV \
    | head -n1 \
    )" \
    # Download
    && DEEPSTREAM_FILE="/opt/deepstream-sdk.deb" \
    && curl -Lo "${DEEPSTREAM_FILE}" "${DEEPSTREAM_URL_DOWNLOAD}/${DEEPSTREAM_FILE_DOWNLOAD}" \
    --oauth2-bearer "${TOKEN}" \
    # Decompress the downloaded file
    && apt-get install -y "${DEEPSTREAM_FILE}" \
    # Install
    && cd "${DEEPSTREAM_HOME}" \
    && sed -i 's/"rhel"/"rocky"/g' ./*.sh \
    && ./install.sh \
    && rm -f *.sh \
    && cd - \
    # Download the latest configuration files
    && DEEPSTREAM_MODELS_DIR="${DEEPSTREAM_HOME}/samples/configs/tao_pretrained_models" \
    && DEEPSTREAM_SAMPLE_HOME="/opt/deepstream_reference_apps" \
    && git clone "${DEEPSTREAM_REFERENCES_REPO_URL}" "${DEEPSTREAM_SAMPLE_HOME}" \
    --branch "${DEEPSTREAM_REFERENCES_REPO_TAG}" \
    --single-branch \
    && cd "${DEEPSTREAM_SAMPLE_HOME}/deepstream_app_tao_configs/" \
    && cp -a * "${DEEPSTREAM_MODELS_DIR}" \
    && cd - \
    # Download the models
    && cd "${DEEPSTREAM_MODELS_DIR}" \
    && ./download_models.sh \
    && cd - \
    # Change permissions for user-level modification
    && chown -R "${USER_UID}:${USER_GID}" "${DEEPSTREAM_HOME}/samples" \
    # Cleanup
    && apt-get clean all \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf "${DEEPSTREAM_SAMPLE_HOME}" \
    && rm -f "${DEEPSTREAM_FILE}"

# Install utilities - Custom
ARG ADDONS_HOME="/opt/openark/vdi/desktop"
ADD ./addons "${ADDONS_HOME}"
RUN chmod -R a+x "${ADDONS_HOME}/bin" \
    && for file in ${ADDONS_HOME}/share/applications/*.desktop; do true \
    && ln -s "${file}" "/usr/share/applications/$(basename "${file}")" \
    ; done \
    && for file in ${ADDONS_HOME}/share/autostart/*.desktop; do true \
    && ln -s "${file}" "/etc/xdg/autostart/$(basename "${file}")" \
    ; done

# Add firefox preferences
ADD ./browser/firefox/autoconfig.js /usr/lib64/firefox/defaults/pref/
ADD ./browser/firefox/firefox.cfg /usr/lib64/firefox/

# Add read-only shared directory
RUN mkdir -p /opt/public/ \
    && chown -R "${USER_UID}:${USER_GID}" /opt/public/

# Add scripts
ADD ./config/weston.ini /etc/xdg/weston/weston.ini
ADD ./scripts /opt/scripts/
RUN chmod 0555 /opt/scripts/*

# Add a user
RUN /sbin/ldconfig.real \
    && groupadd -g "${USER_GID}" -o "${USER_NAME}" \
    && useradd -u "${USER_UID}" -g "${USER_GID}" -G "audio,cdrom,input,render,video" \
    -s "/bin/${USER_SHELL}" -m -o "${USER_NAME}" \
    && printf "${USER_UID}:2001:65535" > /etc/subuid \
    && printf "${USER_GID}:2001:65535" > /etc/subgid \
    && mkdir -p "${XDG_RUNTIME_DIR}" \
    && chmod 700 "${XDG_RUNTIME_DIR}" \
    && chown "${USER_UID}:${USER_GID}" "${XDG_RUNTIME_DIR}"
USER "${USER_NAME}"
WORKDIR "/home/${USER_NAME}"
