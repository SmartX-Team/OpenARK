---
- name: Populate service facts
  service_facts:

- name: Check whether kiss OS is dirty
  stat:
    path: /opt/.kiss-dirty
  register: kiss_dirty_file

- name: Check whether kubelet service is running
  set_fact:
    kiss_k8s_is_ok: >-
      {{
          'kubelet.service' in ansible_facts.services
        and
          ansible_facts.services['kubelet.service'].state == 'running'
      }}

- when: kiss_k8s_is_ok
  block:
    - name: Check whether the kubelet config file exists
      stat:
        path: /var/lib/kubelet/config.yaml
      register: result_stat

    - name: Check whether the cluster name is same
      when: result_stat.stat.exists
      lineinfile:
        dest: /var/lib/kubelet/config.yaml
        line: "clusterDomain: {{ cluster_name }}"
      check_mode: true
      register: result_config

    - name: Update k8s status
      set_fact:
        kiss_k8s_is_ok: >-
          {{
            result_stat.stat.exists
          and
            not result_config.changed
          }}

- name: Check whether kiss OS is already configured
  set_fact:
    kiss_os_dirty: "{{ kiss_dirty_file.stat.exists }}"

- name: Collect brief device informations
  loop: "{{ ansible_devices.items() }}"
  # filter the devices that has 1 or more physical IDs
  when: >-
    (item[1].links.ids | length) > 0
    and item[1].sectors != '0'
    and item[1].scheduler_mode != ''
  set_fact:
    # TODO: sort names numerically
    devices: >
      {{ devices|default([]) + [{
        'name': item[0],
        'size': (item[1].sectors | int) * (item[1].sectorsize | int),
      }] }}

- name: Find the most suitable device (>=200Gi)
  when: kiss_os_dist == 'flatcar'
  set_fact:
    device: "{{ devices | selectattr('size', 'ge', 200 * 1024 * 1024 * 1024) | sort(attribute='size,name') | first }}"

- name: Find the root device
  when: kiss_os_dist != 'flatcar'
  set_fact:
    # [5:] = "/dev/"
    device: >
      {{{
        'name': ( ansible_mounts | json_query('[?mount == `/`].device') | first )[5:],
        'size': ansible_mounts | json_query('[?mount == `/`].size_total') | first,
      }}}

- name: Check whether kiss storage is already configured
  # TODO: verify data
  set_fact:
    kiss_storage_exists: >-
      {{
        kiss_os_exists
      and
        (not (kiss_group_force_reset | default(False)))
      and
        kiss_k8s_is_ok
      }}

- name: Update boot order to PxE-first
  when:
    - kiss_group_force_reset_os
    - kiss_group_role_is_member is defined and kiss_group_role_is_member
    - kiss_os_exists
    - kiss_os_dirty
    - not kiss_storage_exists
  include_tasks: boot-pxe.yaml

- name: Reboot the boxes before re-installing OS (The task will be restarted)
  when:
    - kiss_group_force_reset_os
    - kiss_group_role_is_member is defined and kiss_group_role_is_member
    - kiss_os_exists
    - kiss_os_dirty
    - not kiss_storage_exists
  reboot:
    reboot_timeout: 3600 # 1h (booting can take a long time)

- name: Assert rebooting
  when:
    - kiss_group_force_reset_os
    - kiss_group_role_is_member is defined and kiss_group_role_is_member
    - kiss_os_exists
    - kiss_os_dirty
    - not kiss_storage_exists
  fail:
    msg: The nodes should be rebooted!

- name: Regard kiss OS as dirty
  when:
    - kiss_os_exists
    - not kiss_os_dirty
  file:
    path: /opt/.kiss-dirty
    state: touch
    mode: "0444"

- name: Cleanup disks
  when:
    - kiss_group_reset_storage is not defined or kiss_group_reset_storage
    - kiss_group_role_is_member is defined and kiss_group_role_is_member
    - not kiss_os_exists or kiss_os_dirty
    - not kiss_storage_exists
  include_tasks: storage-cleanup.yaml

- name: Provision disks
  include_tasks: storage-provision.yaml

- name: Update boot order to Disk-first
  when:
    - kiss_group_reset_storage is not defined or kiss_group_reset_storage
    - kiss_group_role_is_member is defined and kiss_group_role_is_member
    - not kiss_os_exists
    - kiss_os_hot_install
  include_tasks: boot-disk.yaml

- name: Update boot order to PxE-first
  when:
    - kiss_group_reset_storage is not defined or kiss_group_reset_storage
    - kiss_group_role_is_member is defined and kiss_group_role_is_member
    - not kiss_os_exists
    - not kiss_os_hot_install
  include_tasks: boot-pxe.yaml

- name: Reboot the boxes after installing OS (The task will be restarted)
  when:
    - kiss_group_reset_storage is not defined or kiss_group_reset_storage
    - kiss_group_role_is_member is defined and kiss_group_role_is_member
    - not kiss_os_exists
  reboot:
    reboot_timeout: 3600 # 1h (booting can take a long time)

- name: Assert rebooting
  when:
    - kiss_group_reset_storage is not defined or kiss_group_reset_storage
    - kiss_group_role_is_member is defined and kiss_group_role_is_member
    - not kiss_os_exists
  fail:
    msg: The nodes should be rebooted!
