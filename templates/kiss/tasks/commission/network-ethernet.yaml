---
- name: Collect network inteface informations
  loop: "{{ ansible_interfaces }}"
  # filter the physical devices that has connected to the specific network as ethernet
  when: >
    item in ansible_facts
    and ansible_facts[item].active
    and 'ipv4' in ansible_facts[item]
    and 'netmask' in ansible_facts[item].ipv4
    and ansible_facts[item].ipv4.netmask == kiss_network_ipv4_subnet_mask
    and 'network' in ansible_facts[item].ipv4
    and ansible_facts[item].ipv4.network == kiss_network_ipv4_subnet_address
    and 'speed' in ansible_facts[item]
    and ansible_facts[item].speed | int >= 10
  set_fact:
    interfaces: >
      {{ interfaces|default([]) + [{
        'name': item,
        'address_ipv4': ansible_facts[item].ipv4.address,
        'address_ipv4_netmask': kiss_network_ipv4_subnet_mask_prefix,
        'address_ipv4_gateway': ansible_default_ipv4.gateway,
        'dns': [
          kiss_network_nameserver_incluster_ipv4,
        ],
        'macaddress': ansible_facts[item].macaddress,
        'module': ansible_facts[item].module,
        'mtu': kiss_network_interface_mtu_size,
        'pciid': ansible_facts[item].pciid,
        'speed': ansible_facts[item].speed,
        'speed_neg': -ansible_facts[item].speed,
      }] }}

- name: Sort by speed, module, and PCI ID
  set_fact:
    interfaces: "{{ interfaces | sort(attribute='speed_neg,module,pciid') }}"

- name: Select the fastest interface as Primary
  when: interfaces | length > 0
  set_fact:
    interface_primary: "{{ interfaces[0] }}"
    interface_primary_address_ipv4: "{{ interfaces[0].address_ipv4 }}"
    interface_primary_speed_mbps: "{{ interfaces[0].speed }}"

- name: Ping from primary interface to the gateway
  when: interface_primary_address_ipv4 is defined
  command: >
    ping -4 -c 4
    -I {{ interface_primary_address_ipv4 }}
    {{ ansible_default_ipv4.gateway }}
  register: result
  until: result.rc == 0
  delay: 5
  retries: 5

- name: Update SSH access IP
  when: interface_primary is defined
  set_fact:
    ansible_ssh_host: "{{ interface_primary_address_ipv4 }}"

- name: Show about the primary inteface
  when: interface_primary is defined
  debug:
    var: interface_primary

- name: List all network configurations
  find:
    paths:
      - /etc/systemd/network/
    file_type: directory
    pattern: "*-kiss-*"
  register: results

- name: Remove all network configurations
  file:
    path: "{{ item.path }}"
    state: absent
    force: true
  with_items: "{{ results.files }}"

- name: Enable primary interfaces
  when: kiss_network_service == 'systemd-networkd'
  with_items: "{{ interfaces[:1] }}"
  template:
    src: ./template_systemd-networkd_10-enable.network.j2
    dest: /etc/systemd/network/10-kiss-enable-{{ item.name }}.network

- name: Disable all other interfaces
  when:
    - kiss_allow_pruning_network_interfaces | default(False)
    - kiss_network_service == 'systemd-networkd'
  with_items: "{{ interfaces[1:] }}"
  template:
    src: ./template_systemd-networkd_20-disable.network.j2
    dest: /etc/systemd/network/20-kiss-disable-{{ item.name }}.network

- name: Unmanage interface networks from DHCP - Local DNS Server
  with_items: "{{ interfaces[:1] }}"
  command: >
    ip route del {{ kiss_network_nameserver_incluster_ipv4 }}
    dev {{ item.name }}
    proto dhcp
  ignore_errors: true

- name: Unmanage interface networks from DHCP - Subnet Gateway
  with_items: "{{ interfaces[:1] }}"
  command: >
    ip route del {{ item.address_ipv4_gateway }}
    dev {{ item.name }}
    proto dhcp
  ignore_errors: true

- name: Unmanage interface networks from DHCP - Default Gateway
  with_items: "{{ interfaces[:1] }}"
  command: >
    ip route del default
    via {{ item.address_ipv4_gateway }}
    dev {{ item.name }}
    proto dhcp
  ignore_errors: true

- name: Modify MTU - {{ item.mtu }} Bytes
  with_items: "{{ interfaces[:1] }}"
  command: ip link set {{ item.name }} mtu {{ item.mtu }}
  ignore_errors: true

- name: Wait for primary interface to be linked up
  when:
    - interface_primary_address_ipv4 is defined
  command: >
    ping -4 -c 4
    -I {{ interface_primary_address_ipv4 }}
    {{ ansible_default_ipv4.gateway }}
  register: result
  until: result.rc == 0
  delay: 30
  retries: 10
