---
- name: Define supported architechures
  set_fact:
    flatcar_linux_architectures_efi:
      aarch64: bootaa64.efi
      x86_64: bootx64.efi
    flatcar_linux_channel: stable
    flatcar_linux_repo_host: raw.githubusercontent.com
    flatcar_linux_repo_user: flatcar
    flatcar_linux_repo_installer_name: init
    flatcar_linux_repo_installer_branch_name: flatcar-master
    flatcar_linux_repo_installer_path: /bin/flatcar-install
    flatcar_linux_repo_installer_flags: ""

- name: Check whether the boxes' architectures are supported
  assert:
    that: ansible_architecture in flatcar_linux_architectures_efi
    fail_msg: "Unsupported architecture: {{ ansible_architecture }}"
    success_msg: "Supported architecture: {{ ansible_architecture }}"

- name: Download installer script
  when: not kiss_os_exists
  get_url:
    url: https://{{ flatcar_linux_repo_host }}/{{ flatcar_linux_repo_user }}/{{ flatcar_linux_repo_installer_name }}/{{ flatcar_linux_repo_installer_branch_name }}{{ flatcar_linux_repo_installer_path }}
    dest: /tmp/flatcar-install
    mode: "0550"
    force: true
    timeout: 30
  register: result_download
  until: result_download is succeeded
  retries: 10
  delay: 5

- name: Install OS
  when: not kiss_os_exists
  command: /tmp/flatcar-install -C {{ flatcar_linux_channel }} -d "/dev/{{ device.name }}" -i /run/ignition.json {{ flatcar_linux_repo_installer_flags }}

- name: Create UEFI boot entry
  when: not kiss_os_exists
  shell: >-
    efibootmgr
    --create
    --disk "/dev/{{ device.name }}"
    --label "NetAI Cloud KISS Linux (Flatcar Container Linux {{ flatcar_linux_channel }})"
    --loader "\\efi\\boot\\{{ flatcar_linux_architectures_efi[ansible_architecture] }}"
  ignore_errors: true
