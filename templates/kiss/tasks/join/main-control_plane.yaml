---
- import_playbook: ./add-node-as-control_plane.yaml
- import_playbook: ./add-node-as-bgp-peer.yaml

# TODO: manage by root cluster
- hosts: kube_control_plane
  tasks:
    - when:
        - groups['kube_control_plane'] | length == 1
        - kiss_cluster_is_default is defined and not kiss_cluster_is_default
      block:
        - name: Mark the bootstrapped node as "first-node"
          shell: >
            {{ bin_dir }}/kubectl label nodes {{ inventory_hostname }}
            --overwrite
            node-role.kubernetes.io/first-node=

        - name: Create Kiss Namespace
          shell: >
            {{ bin_dir }}/kubectl get namespace kiss
            || {{ bin_dir }}/kubectl create namespace kiss

        - name: Inherit KISS ConfigMap
          block:
            - name: Download ConfigMap
              delegate_to: localhost
              shell:
                cmd: >
                  {{ bin_dir }}/kubectl get configmap "kiss-config"
                  --namespace kiss
                  --output yaml
              register: result

            - name: Save ConfigMap
              shell:
                cmd: >
                  {{ bin_dir }}/kubectl get configmap "kiss-config"
                  --namespace kiss
                  || {{ bin_dir }}/kubectl create -f -
                stdin: "{{ result.stdout }}"

            - name: Update Cluster Name
              shell:
                cmd: >
                  {{ bin_dir }}/kubectl patch configmap "kiss-config"
                  --namespace kiss
                  --patch '{"data":{"kiss_cluster_name":"{{ kiss_cluster_name_snake_case }}"}}'

        - name: Install KISS
          shell:
            cmd: >
              sed "s/__IMAGE__/$(
              {{ bin_dir }}/kubectl get configmap "kiss-config"
              --namespace kiss
              --output jsonpath
              --template "{.data.kiss_installer_image}"
              | sed 's/[^a-zA-Z0-9]/\\&/g; 1{$s/^$/""/}; 1!s/^/"/; $!s/$/"/'
              )/g"
              | {{ bin_dir }}/kubectl apply -f -
            stdin: |
              ---
              apiVersion: v1
              kind: ServiceAccount
              metadata:
                name: kiss-system
                namespace: kiss
              ---
              apiVersion: rbac.authorization.k8s.io/v1
              kind: Role
              metadata:
                name: kiss-system
                namespace: kiss
              rules:
                - apiGroups:
                    - "*"
                  resources:
                    - "*"
                  verbs:
                    - "*"
              ---
              apiVersion: rbac.authorization.k8s.io/v1
              kind: RoleBinding
              metadata:
                name: kiss-system
                namespace: kiss
              roleRef:
                apiGroup: rbac.authorization.k8s.io
                kind: Role
                name: kiss-system
              subjects:
                - apiGroup: ""
                  kind: ServiceAccount
                  name: kiss-system
                  namespace: kiss
              ---
              apiVersion: rbac.authorization.k8s.io/v1
              kind: ClusterRole
              metadata:
                name: kiss-system
              rules:
                - apiGroups:
                    - "*"
                  resources:
                    - "*"
                  verbs:
                    - "*"
              ---
              apiVersion: rbac.authorization.k8s.io/v1
              kind: ClusterRoleBinding
              metadata:
                name: kiss-system
              roleRef:
                apiGroup: rbac.authorization.k8s.io
                kind: ClusterRole
                name: kiss-system
              subjects:
                - apiGroup: ""
                  kind: ServiceAccount
                  name: kiss-system
                  namespace: kiss
              ---
              apiVersion: batch/v1
              kind: Job
              metadata:
                name: service-installer-kiss-kiss
                namespace: kiss
              spec:
                template:
                  metadata:
                    labels:
                      name: service-installer-kiss-kiss
                      serviceKind: kiss
                      serviceName: kiss
                      serviceType: service-installer
                  spec:
                    affinity:
                      nodeAffinity:
                        # KISS normal control plane nodes should be preferred
                        preferredDuringSchedulingIgnoredDuringExecution:
                          - weight: 1
                            preference:
                              matchExpressions:
                                - key: node-role.kubernetes.io/control-plane
                                  operator: Exists
                        # KISS ephemeral control plane nodes should be excluded
                        requiredDuringSchedulingIgnoredDuringExecution:
                          nodeSelectorTerms:
                            - matchExpressions:
                                - key: node-role.kubernetes.io/kiss-ephemeral-control-plane
                                  operator: DoesNotExist
                    restartPolicy: OnFailure
                    securityContext:
                      seccompProfile:
                        type: RuntimeDefault
                    serviceAccount: kiss-system
                    containers:
                      - name: installer
                        image: __IMAGE__
                        imagePullPolicy: Always
                        resources:
                          requests:
                            cpu: 30m
                            memory: 20Mi
                          limits:
                            cpu: 100m
                            memory: 100Mi
