---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ansible-task-commission
  namespace: kiss
data:
  main.yaml: |
    ---
    - hosts: target
      tasks:
        - include_tasks: hostname.yaml
        - include_tasks: power.yaml
        - include_tasks: network.yaml
        - include_tasks: storage.yaml
        - include_tasks: submit.yaml
  hostname.yaml: |
    ---
    - name: Set machine hostname
      shell: >
        hostnamectl set-hostname '{{ ansible_host }}'
  power.yaml: |
    ---
    - name: Check whether IPMI exists
      stat:
        path: /dev/ipmi0
      register: ipmi

    - name: Pull IPMI docker image
      when: ipmi.stat.exists
      shell: >
        docker pull
        docker.io/mikeynap/ipmitool:latest
      retries: 5
      delay: 5

    - name: Get IPMI IP Address
      when: ipmi.stat.exists
      shell: >
        docker run --rm
        --device /dev/ipmi0:/dev/ipmi0:rw
        docker.io/mikeynap/ipmitool:latest
        lan print
        | sed -n -e 's/^IP Address *: *\([0-9.]*\)/\1/p'
      register: ipmi_address

    - name: Set IPMI IP Address
      when: ipmi.stat.exists
      shell: >
        docker run --rm
        --device /dev/ipmi0:/dev/ipmi0:rw
        docker.io/mikeynap/ipmitool:latest
        lan set 1 ipaddr "{{ ipmi_address.stdout }}"
      ignore_errors: true

    - name: Set IPMI IP Address Netmask
      when: ipmi.stat.exists
      shell: >
        docker run --rm
        --device /dev/ipmi0:/dev/ipmi0:rw
        docker.io/mikeynap/ipmitool:latest
        lan set 1 netmask 255.240.0.0
      ignore_errors: true

    - name: Set IPMI IP Address Default Gateway
      when: ipmi.stat.exists
      shell: >
        docker run --rm
        --device /dev/ipmi0:/dev/ipmi0:rw
        docker.io/mikeynap/ipmitool:latest
        lan set 1 defgw ipaddr 10.47.255.254
      ignore_errors: true

    - name: Set IPMI user 9 name
      when: ipmi.stat.exists
      shell: >
        docker run --rm
        --device /dev/ipmi0:/dev/ipmi0:rw
        docker.io/mikeynap/ipmitool:latest
        user set name 9 'kiss'
      ignore_errors: true

    - name: Set IPMI user 9 password
      when: ipmi.stat.exists
      shell: >
        docker run --rm
        --device /dev/ipmi0:/dev/ipmi0:rw
        docker.io/mikeynap/ipmitool:latest
        user set password 9 'kiss.netaiCloud'
      ignore_errors: true

    - name: Enable IPMI user 9
      when: ipmi.stat.exists
      shell: >
        docker run --rm
        --device /dev/ipmi0:/dev/ipmi0:rw
        docker.io/mikeynap/ipmitool:latest
        user enable 9

    - name: Link on IPMI user 9 as ADMIN
      when: ipmi.stat.exists
      shell: >
        docker run --rm
        --device /dev/ipmi0:/dev/ipmi0:rw
        docker.io/mikeynap/ipmitool:latest
        channel setaccess 1 9 callin=on ipmi=on link=on privilege=4

    - name: Change boot order to PXE-first
      when: ipmi.stat.exists
      shell: >
        docker run --rm
        --device /dev/ipmi0:/dev/ipmi0:rw
        docker.io/mikeynap/ipmitool:latest
        chassis bootparam set bootflag force_pxe

    - name: Change boot order to PXE-first
      when: ipmi.stat.exists
      shell: >
        docker run --rm
        --device /dev/ipmi0:/dev/ipmi0:rw
        docker.io/mikeynap/ipmitool:latest
        chassis bootdev pxe
      ignore_errors: true
  network.yaml: |
    ---
    - name: Get Network Interfaces
      shell: ls /sys/class/net | grep -e '^en*'
      register: netdev

    - name: Get Network Interfaces
      debug:
        msg: "{{ netdev.stdout_lines }}"
  storage-cleanup-csi-rook-ceph.yaml: |
    ---
    - name: List all plugins
      find:
        paths:
          - /var/lib/kubelet/plugins/
        file_type: directory
        pattern: rook-ceph.*
      register: results

    - name: Remove plugins
      file:
        path: "{{ item.path }}"
        state: absent
        force: true
      with_items: "{{ results.files }}"
  storage-cleanup-csi.yaml: |
    ---
    - name: Cleanup CSI | rook-ceph
      include: storage-cleanup-csi-rook-ceph.yaml
  storage-cleanup-device-physical.yaml: |
    ---
    - name: Wipe Filesystem | {{ device[0] }}
      shell: wipefs --all /dev/{{ device[0] }} && sync

    - name: Wipe GUID partiton table (GPT) | {{ device[0] }}
      shell: sgdisk --zap-all /dev/{{ device[0] }} && sync

    - name: Fill with zero to Erase Ceph metadata (100MB) | {{ device[0] }}
      shell: dd if=/dev/zero of=/dev/{{ device[0] }} bs=1M count=100 && sync

    - name: Discard sectors | {{ device[0] }}
      shell: blkdiscard /dev/{{ device[0] }} && sync

    - name: Inform the OS of partition table changes | {{ device[0] }}
      shell: partprobe /dev/{{ device[0] }} && sync
  storage-cleanup-device.yaml: |
    ---
    - name: Remove all logical devices
      block:
        - name: Remove all logical volumes
          loop: "{{ ansible_lvm.lvs.items() }}"
          loop_control:
            loop_var: lv
          lvol:
            vg: "{{ lv[1].vg }}"
            lv: "{{ lv[0] }}"
            state: absent
            force: yes

        - name: Unregister all logical devices
          command: dmsetup remove_all

        - name: Update facts
          setup:

    - name: Cleanup all physical devices
      loop: "{{ ansible_devices.items() }}"
      loop_control:
        loop_var: device
      # filter the devices that has 1 or more physical IDs
      when: device[1].links.ids | length
      include: storage-cleanup-device-physical.yaml
  storage-cleanup.yaml: |
    ---
    - name: Cleanup all physical devices
      include: storage-cleanup-device.yaml

    - name: Cleanup all CSI plugins
      include: storage-cleanup-csi.yaml

    - name: Update facts
      setup:
  storage-provision-volumes.yaml: |
    ---
    - name: Create a logical volume | {{ lv.kind }} | {{ lv.name }}
      lvol:
        vg: kiss
        lv: "{{ lv.kind }}.{{ lv.name }}"
        size: "{{ lv.size }}"
        resizefs: true

    - name: Format the XFS filesystem | {{ lv.kind }} | {{ lv.name }}
      filesystem:
        fstype: xfs
        dev: /dev/mapper/kiss-{{ lv.kind }}.{{ lv.name }}

    - name: Mount a logical volume | {{ lv.kind }} | {{ lv.name }}
      mount:
        path: "{{ lv.path }}"
        src: /dev/mapper/kiss-{{ lv.kind }}.{{ lv.name }}
        fstype: xfs
        opts: noatime
        state: mounted
  storage-provision.yaml: |
    ---
    - name: Collect brief device infomations
      loop: "{{ ansible_devices.items() }}"
      # filter the devices that has 1 or more physical IDs
      when: item[1].links.ids | length
      set_fact:
        # TODO: sort names numerically
        devices: >
          {{ devices|default([]) + [{
            'name': item[0],
            'size': (item[1].sectors | int) * (item[1].sectorsize | int),
          }] }}

    - name: Find the most suitable device (>=64Gi)
      set_fact:
        device: "{{ devices | selectattr('size', 'ge', 64 * 1024 * 1024 * 1024) | sort(attribute='size,name') | first }}"

    - name: Create a volume group on top
      lvg:
        vg: kiss
        pvs:
          - "/dev/{{ device.name }}"
  storage.yaml: |
    ---
    - name: Check whether kiss storage is already configured
      set_fact:
        kiss_storage_exists: "{{ 'kiss' in ansible_lvm.vgs.keys() }}"

    - name: Cleanup disks
      when: not kiss_storage_exists
      include: storage-cleanup.yaml

    - name: Provision disks
      when: not kiss_storage_exists
      include: storage-provision.yaml

    - name: Provision logical volumes
      block:
        - name: Define volume informations
          set_fact:
            lvs:
              - kind: binary
                name: cni
                path: /opt/cni
                size: 256M
              # - kind: binary
              #   name: common
              #   path: /opt/bin
              #   size: 1G
              - kind: binary
                name: etcd
                path: /opt/etcd
                size: 8G
              # - kind: binary
              #   name: pypy3
              #   path: /opt/pypy3
              #   size: 256M
              - kind: var
                name: cni
                path: /var/lib/cni
                size: 256M
              - kind: var
                name: containerd
                path: /var/lib/containerd
                size: 16G
              - kind: var
                name: k8s
                path: /var/lib/kubelet
                size: 256M

        - name: Do Provision
          loop: "{{ lvs }}"
          loop_control:
            loop_var: lv
          include: storage-provision-volumes.yaml
  submit.yaml: |
    ---
    - name: Submit results to kiss cluster
      uri:
        url: http://gateway.kiss.svc.ops.netai-cloud/commission
        method: POST
        return_content: false
        status_code: 200
        body_format: json
        body:
          access:
            address: "{{ ansible_ssh_host }}"
          machine:
            uuid: "{{ ansible_host_uuid }}"
          power:
            type: Ipmi
            address: "{{ ipmi_address.stdout }}"
