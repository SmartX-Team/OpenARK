---
apiVersion: v1
kind: ConfigMap
metadata:
  name: matchbox-boot
  namespace: kiss
data:
  boot.ipxe: |
    #!ipxe
    # Retry automatic configuration indefinitely until it succeeds
    :boot
    chain /ipxe?mac=${mac:hexhyp}&chip=${chip}&domain=${domain}&hostname=${hostname}&uuid=${uuid}&manufacturer=${manufacturer}&product=${product}&serial=${serial}&buildarch=${buildarch}&cpumodel=${cpumodel}&cpuvendor=${cpuvendor}&platform=${platform} || goto boot
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: matchbox-groups
  namespace: kiss
data:
  default.json: |
    {
      "id": "default",
      "name": "default",
      "profile": "kiss",
      "selector": {},
      "metadata": {}
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: matchbox-ignition
  namespace: kiss
data:
  kiss.yaml: |
    ---
    variant: flatcar
    version: 1.0.0
    kernel_arguments:
    passwd:
      users:
        - name: ENV_USERNAME
          ssh_authorized_keys:
            - ENV_SSH_AUTHORIZED_KEYS
          groups:
            - sudo
            - docker
    storage:
      directories:
        - path: /etc/systemd/system/docker.service.d
          filesystem: root
          overwrite: true
      files:
        - path: /etc/docker/daemon.json
          filesystem: root
          overwrite: true
          mode: 0444
          contents:
            inline: |
              {
                "exec-opts": [
                  "native.cgroupdriver=systemd"
                ],
                "insecure-registries": [
                  "registry.kiss.svc.ops.netai-cloud"
                ],
                "log-driver": "json-file",
                "log-opts": {
                  "max-size": "100m"
                },
                "storage-driver": "overlay2",
                "storage-opts": [
                  "overlay2.override_kernel_check=true"
                ]
              }
        - path: /etc/modules-load.d/10-gpu-nvidia-driver.conf
          filesystem: root
          overwrite: true
          mode: 0444
          contents:
            inline: |
              loop
              i2c_core
              ipmi_msghandler
        - path: /etc/sysctl.d/50-hugepages.conf
          filesystem: root
          overwrite: true
          mode: 0444
          contents:
            inline: |
              vm.nr_hugepages=8192
        - path: /etc/sysctl.d/90-reverse-path-filter.conf
          filesystem: root
          overwrite: true
          mode: 0444
          contents:
            inline: |
              net.ipv4.conf.all.rp_filter=0
              net.ipv4.conf.default.rp_filter=0
        - path: /etc/systemd/system/notify-new-box.service
          filesystem: root
          overwrite: true
          mode: 0444
          contents:
            inline: |
              [Unit]
              Description=Notify to the kiss cluster that a new (this) box has been appeared.
              Wants=network-online.target
              After=network-online.target

              [Service]
              Type=oneshot
              Restart=on-failure
              ExecStart=/bin/bash -c " \
                  ADDRESS=$(ip -4 addr | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | grep '^10\.' | head -1) ;\
                  UUID=$(cat /sys/class/dmi/id/product_uuid) ;\
                  curl --retry 5 --retry-delay 5 \"http://gateway.kiss.svc.ops.netai-cloud/new?address=$ADDRESS&uuid=$UUID\" ;\
              "
              Restart=on-failure
              RestartSec=30

              [Install]
              WantedBy=multi-user.target
        - path: /etc/systemd/timesyncd.conf
          filesystem: root
          overwrite: true
          mode: 0444
          contents:
            inline: |
              [Time]
              #NTP=ntp.kiss.svc.ops.netai-cloud
        - path: /opt/bin/python
          filesystem: root
          overwrite: true
          mode: 0555
          contents:
            inline: |
              #!/usr/bin/bash
              # origin: https://github.com/kubernetes-sigs/kubespray/blob/release-2.19/roles/bootstrap-os/files/bootstrap.sh
              set -e

              ARCH=$(uname -m)
              BINDIR="/opt/bin"

              case $ARCH in
                "x86_64")
                  PYPY_ARCH=linux64
                  PYPI_HASH=46818cb3d74b96b34787548343d266e2562b531ddbaf330383ba930ff1930ed5
                  ;;
                "aarch64")
                  PYPY_ARCH=aarch64
                  PYPI_HASH=2e1ae193d98bc51439642a7618d521ea019f45b8fb226940f7e334c548d2b4b9
                  ;;
                *)
                  echo "Unsupported Architecture: ${ARCH}"
                  exit 1
              esac

              PYTHON_VERSION=3.9
              PYPY_VERSION=7.3.9
              PYPY_FILENAME="pypy${PYTHON_VERSION}-v${PYPY_VERSION}-${PYPY_ARCH}"
              PYPI_URL="https://downloads.python.org/pypy/${PYPY_FILENAME}.tar.bz2"

              # provision a python binary
              if [[ ! -e /opt/pypy3/bin/pypy3 ]]; then
                TAR_FILE="${BINDIR}/pyp.tar.bz2"
                sudo wget --tries=5 -O "${TAR_FILE}" "${PYPI_URL}"
                echo "${PYPI_HASH} ${TAR_FILE}" | sha256sum -c -
                sudo tar -xjf "${TAR_FILE}" && sudo rm "${TAR_FILE}"
                sudo mv -n "${PYPY_FILENAME}" "${BINDIR}/../pypy3"
              fi

              # execute python
              export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/pypy3/lib
              exec /opt/pypy3/bin/pypy3 "${@:1}"
        - path: /opt/bin/.bootstrapped
          filesystem: root
          mode: 0444
          contents:
            inline: ""
      links:
        - path: /etc/systemd/system/multi-user.target.wants/notify-new-box.service
          target: /etc/systemd/system/notify-new-box.service
          filesystem: root
          overwrite: true
          hard: false
    systemd:
      units:
        - name: docker.service
          enable: true
          dropins:
            - name: 30-increase-ulimit.conf
              contents: |
                [Service]
                LimitMEMLOCK=infinity
        - name: ntpd.service
          enable: false
        - name: systemd-timesyncd.service
          enable: true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: matchbox-profiles
  namespace: kiss
data:
  kiss.json: |
    {
      "id": "kiss",
      "name": "NetAI Cloud KISS Linux (Flatcar Container Linux)",
      "boot": {
        "kernel": "http://assets.kiss.svc.ops.netai-cloud/flatcar-${buildarch}/current/flatcar_production_pxe.vmlinuz",
        "initrd": [
          "http://assets.kiss.svc.ops.netai-cloud/flatcar-${buildarch}/current/flatcar_production_pxe_image.cpio.gz"
        ],
        "args": [
          "initrd=flatcar_production_pxe_image.cpio.gz",
          "flatcar.config.url=http://matchbox.kiss.svc.ops.netai-cloud/ignition",
          "flatcar.first_boot=yes"
        ]
      },
      "ignition_id": "kiss.yaml"
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: matchbox
  namespace: kiss
  labels:
    name: matchbox
    kissService: "true"
    serviceType: internal
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      name: matchbox
  template:
    metadata:
      labels:
        name: matchbox
        kissService: "true"
        serviceType: internal
    spec:
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      initContainers:
        - name: init-data
          image: docker.io/ubuntu:rolling
          command:
            - bash
          args:
            - -c
            - |
              cp /var/lib/matchbox/ignition-raw/*.yaml /var/lib/matchbox/ignition/
              SSH_AUTHORIZED_KEYS_SED=$(sed -e 's/[&\\/]/\\&/g; s/$/\\/' -e '$s/\\$//' <<< ${SSH_AUTHORIZED_KEYS})
              sed -i "s/ENV_SSH_AUTHORIZED_KEYS/${SSH_AUTHORIZED_KEYS_SED}/g" /var/lib/matchbox/ignition/*.yaml
              sed -i "s/ENV_USERNAME/${USERNAME}/g" /var/lib/matchbox/ignition/*.yaml
          env:
            - name: SSH_AUTHORIZED_KEYS
              valueFrom:
                configMapKeyRef:
                  name: kiss-config
                  key: auth_ssh_key_id_ed25519_public
            - name: USERNAME
              valueFrom:
                configMapKeyRef:
                  name: kiss-config
                  key: auth_ssh_username
          resources:
            requests:
              cpu: 30m
              memory: 20Mi
            limits:
              cpu: 50m
              memory: 50Mi
          volumeMounts:
            - name: ignition
              mountPath: /var/lib/matchbox/ignition
            - name: ignition-raw
              mountPath: /var/lib/matchbox/ignition-raw
            - name: tmp
              mountPath: /tmp
      containers:
        - name: matchbox
          image: quay.io/poseidon/matchbox:v0.9.1-48-gddbed051
          env:
            - name: MATCHBOX_ADDRESS
              value: 0.0.0.0:8080
            - name: MATCHBOX_LOG_LEVEL
              value: debug
          ports:
            - name: http
              containerPort: 8080
          livenessProbe:
            initialDelaySeconds: 5
            httpGet:
              path: /
              port: 8080
          resources:
            requests:
              cpu: 30m
              memory: 20Mi
            limits:
              cpu: 50m
              memory: 50Mi
          volumeMounts:
            - name: assets
              mountPath: /var/lib/matchbox/assets
            - name: boot
              mountPath: /var/lib/matchbox/assets/boot
            - name: groups
              mountPath: /var/lib/matchbox/groups
            - name: ignition
              mountPath: /var/lib/matchbox/ignition
            - name: profiles
              mountPath: /var/lib/matchbox/profiles
      volumes:
        - name: assets
          emptyDir: {}
        - name: boot
          configMap:
            name: matchbox-boot
            defaultMode: 0400
        - name: groups
          configMap:
            name: matchbox-groups
            defaultMode: 0400
        - name: ignition
          emptyDir: {}
        - name: ignition-raw
          configMap:
            name: matchbox-ignition
            defaultMode: 0400
        - name: profiles
          configMap:
            name: matchbox-profiles
            defaultMode: 0400
        - name: tmp
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: matchbox
  namespace: kiss
spec:
  type: ClusterIP
  selector:
    name: matchbox
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8080
