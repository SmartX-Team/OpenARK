---
apiVersion: v1
kind: ConfigMap
metadata:
  name: matchbox-boot
  namespace: kiss
data:
  boot-flatcar.ipxe: |
    #!ipxe
    # Retry automatic configuration indefinitely until it succeeds
    :boot
    chain /ipxe?mac=${mac:hexhyp}&chip=${chip}&domain=${domain}&hostname=${hostname}&uuid=${uuid}&manufacturer=${manufacturer}&product=${product}&serial=${serial}&buildarch=${buildarch}&cpumodel=${cpumodel}&cpuvendor=${cpuvendor}&platform=${platform} || goto boot
  # TODO: use assets service for caching
  boot-rocky9.ipxe: >
    #!ipxe


    :kernel

    kernel http://download.rockylinux.org/pub/rocky/9/BaseOS/${buildarch}/os/images/pxeboot/vmlinuz
    initrd=initrd.img
    inst.repo=http://download.rockylinux.org/pub/rocky/9/BaseOS/${buildarch}/os/
    inst.ks=http://matchbox.kiss.svc.ops.netai-cloud/assets/boot/rocky9.ks
    || goto kernel


    :initrd

    initrd http://download.rockylinux.org/pub/rocky/9/BaseOS/${buildarch}/os/images/pxeboot/initrd.img
    || goto initrd


    boot
  rocky9.ks: |
    # https://access.redhat.com/labs/kickstartconfig/

    # Install Method
    firstboot --disable
    text

    # Machine Information
    ## EULA Agreement
    eula --agreed
    ## Firewall configuration
    firewall --disabled
    ## Keyboard layouts
    keyboard us
    ## Network
    network --activate --bootproto=dhcp
    ## SELinux configuration
    selinux --permissive
    ## System authorization
    authselect --enablemkhomedir --enablesssd --enablesssdauth --updateall
    ## System language
    lang en_US.UTF-8
    ## System timezone
    timezone Asia/Seoul --utc

    # Install Packages
    %packages
    @^minimal-environment
    kernel
    lvm2
    NetworkManager-wifi
    pciutils
    podman-docker
    yum-utils
    %end

    # KDump Configuration
    %addon com_redhat_kdump --enable --reserve-mb='auto'
    %end

    # User Configuration
    rootpw --lock
    group --gid 5 --name tty
    group --gid 10 --name wheel
    group --gid 11 --name cdrom
    group --gid 39 --name video
    group --gid 63 --name audio
    group --gid 100 --name users
    group --gid 989 --name pipewire
    group --gid 999 --name input
    group --gid 1000 --name docker
    user --uid 1000 --gid 1001 --name ENV_USERNAME --groups docker,users,wheel
    user --uid 2000 --gid 2000 --name tenant --groups audio,cdrom,input,pipewire,render,video --shell /bin/bash --homedir /opt/vdi/tenants/host --lock
    sshkey --username ENV_USERNAME "ENV_SSH_AUTHORIZED_KEYS"

    # Disk Configuration
    clearpart --all --initlabel
    %include /tmp/kiss-config
    %pre

    # Prehibit errors
    set -e
    # Verbose
    set -x

    # Minimum size of disk needed specified in GIBIBYTES
    MINSIZE=200

    BLOCKDEV="/sys/block"
    ROOTDEV=""
    ROOTSIZE=1000000000

    # /sys/block/*/size is in 512 byte chunks
    for DEV in $(lsblk -d | sed 's/^\(nvme[0-9]\+n[0-9]\+\)\?\(sd[a-z]\+\)\?.*$/\1\2/g' | xargs); do
      if [ -d ${BLOCKDEV}/${DEV} ]; then
        if (( $(cat ${BLOCKDEV}/${DEV}/removable) == 0 )); then
          # Remove all data in disks
          wipefs --all --force /dev/${DEV} && sync
          sgdisk --zap-all /dev/${DEV} && sync
          dd if=/dev/zero of=/dev/${DEV} bs=1M count=1024 && sync
          partprobe /dev/${DEV} && sync

          # Find the suitable disk
          SIZE=$(( $(cat ${BLOCKDEV}/${DEV}/size)/2**21 ))
          if (( $SIZE > ${MINSIZE} + 5 )); then
            if (( $SIZE < ${ROOTSIZE} )); then
              echo "Detected suitable disk: ${DEV} (${SIZE} GiB)"
              ROOTDEV=${DEV}
              ROOTSIZE=$SIZE
            fi
          fi
        fi
      fi
    done

    cat <<EOF >/tmp/kiss-config
    # Write partition table
    part /boot/efi --fstype=efi --size=200 --ondisk=${ROOTDEV}
    part /boot --fstype=ext4 --size=512 --ondisk=${ROOTDEV}
    part / --fstype=ext4 --size=$(( ${MINSIZE}*2**10 )) --ondisk=${ROOTDEV}

    # Configure the bootloader.
    bootloader --boot-drive ${ROOTDEV}
    EOF

    # Repository Information
    cat <<EOF >>/tmp/kiss-config
    repo --name=AppStream --baseurl="http://download.rockylinux.org/pub/rocky/9/AppStream/$(uname -m)/os/"
    repo --name=extras --baseurl="http://download.rockylinux.org/pub/rocky/9/extras/$(uname -m)/os/"
    EOF

    # Reboot after installation
    if $(nmcli device | grep '^[a-z0-9-]\+ *wifi \+' >/dev/null); then
      ## Wireless - WIFI => Power Off
      cat <<EOF >>/tmp/kiss-config
    poweroff
    EOF
    else
      ## Wired => Reboot
      cat <<EOF >>/tmp/kiss-config
    reboot
    EOF
    fi

    %end

    %post --erroronfail

    # Prehibit errors
    set -e
    # Verbose
    set -x

    # Pre-Hook
    ## Desktop Environment Configuration
    if [ "$(uname -m)" = 'x86_64' ]; then
      ARCH_WIN32='i686'
    else
      ARCH_WIN32="$(uname -m)"
    fi
    _IS_DESKTOP=false

    # Advanced Network configuration
    mkdir -p /etc/NetworkManager/system-connections/
    ## Wireless - WIFI
    if [ "NETWORK_WIRELESS_WIFI_SSID" != "" ]; then
      for interface in $(nmcli device | grep '^[a-z0-9-]\+ *wifi \+' | sed 's/^\([a-z0-9-]\+\).*$/\1/g' | xargs); do
        _IS_DESKTOP=true
        cat <<EOF >/etc/NetworkManager/system-connections/wireless-wifi-$interface-NETWORK_WIRELESS_WIFI_SSID.nmconnection
    [connection]
    id=wireless-wifi-$interface-NETWORK_WIRELESS_WIFI_SSID
    uuid=$(uuidgen $interface)
    type=wifi
    interface-name=$interface

    [ipv4]
    method=auto
    route-metric=10

    [ipv6]
    addr-gen-mode=default
    method=disabled

    [wifi]
    mode=infrastructure
    ssid=NETWORK_WIRELESS_WIFI_SSID

    [wifi-security]
    auth-log=open
    key-mgmt=NETWORK_WIRELESS_WIFI_KEY_MGMT
    psk=NETWORK_WIRELESS_WIFI_KEY_PSK

    [proxy]
    EOF
        chmod 600 /etc/NetworkManager/system-connections/wireless-wifi-$interface-NETWORK_WIRELESS_WIFI_SSID.nmconnection
      done
    fi

    # Allow passwordless sudo command
    cat <<EOF >/etc/sudoers.d/10-wheel
    ENV_USERNAME ALL=(ALL) NOPASSWD: ALL
    EOF
    chmod 440 /etc/sudoers.d/10-wheel

    # Driver Configuration
    ## GPU - NVIDIA
    if lspci | grep 'NVIDIA'; then
      # GPGPU Detection
      if lspci | grep 'NVIDIA' | grep '3D'; then
        _HAS_NVIDIA_GPGPU=true
        _HAS_NVIDIA_GPU=true
      fi

      # VGA Detection
      if lspci | grep 'NVIDIA' | grep 'VGA'; then
        _IS_DESKTOP=true
        _HAS_NVIDIA_GPU=true
        _HAS_NVIDIA_VGA=true
      fi

      if [ "${_HAS_NVIDIA_GPU}" == "true" ]; then
        dnf install -y epel-release kernel-devel kernel-headers
        dnf config-manager --add-repo "https://developer.download.nvidia.com/compute/cuda/repos/rhel$(rpm -E %rhel)/$(uname -m)/cuda-rhel$(rpm -E %rhel).repo"
        dnf install -y \
          cuda-driver \
          dkms \
          kmod-nvidia-latest-dkms \
          "nvidia-driver-cuda-libs.${ARCH_WIN32}" \
          "nvidia-driver-libs.${ARCH_WIN32}" \
          "nvidia-driver-NvFBCOpenGL.${ARCH_WIN32}" \
          "nvidia-driver-NVML.${ARCH_WIN32}"
      fi

      # Enable NVIDIA Persistenced
      systemctl enable nvidia-persistenced.service

      if [ "${_HAS_NVIDIA_VGA}" == "true" ]; then
        cat <<EOF >/etc/modprobe.d/blacklist-nouveau.conf
    blacklist nouveau
    EOF
      fi
    fi

    # ContainerD Configuration
    yum-config-manager --add-repo "https://download.docker.com/linux/centos/docker-ce.repo"
    dnf install -y containerd.io
    ln -sf /usr/lib/systemd/system/containerd.service /etc/systemd/system/multi-user.target.wants/containerd.service

    # Docker (Podman) Configuration
    mkdir -p /etc/containers/
    mkdir -p /etc/docker/
    mkdir -p /etc/systemd/system/docker.service.d/
    touch /etc/containers/nodocker
    cat <<EOF >/etc/docker/daemon.json
    {
      "insecure-registries": [
        "registry.kiss.svc.ops.netai-cloud"
      ]
    }
    EOF
    ln -sf /usr/lib/systemd/system/podman.socket /etc/systemd/system/sockets.target.wants/podman.socket

    # Environment Variables Configuration
    mkdir -p /etc/profile.d/
    cat <<EOF >/etc/profile.d/path-local-bin.sh
    # local binary path registration

    export PATH=\${PATH}:/usr/local/bin
    export PATH=\${PATH}:/opt/bin
    EOF

    # Kernel Module Configuration
    mkdir -p /etc/modules-load.d/
    cat <<EOF >/etc/modules-load.d/10-gpu-nvidia-driver.conf
    loop
    i2c_core
    ipmi_msghandler
    EOF

    # KISS Configuration
    mkdir -p /etc/systemd/system/multi-user.target.wants/
    cat <<EOF >/etc/systemd/system/notify-new-box.service
    [Unit]
    Description=Notify to the kiss cluster that a new (this) box has been appeared.
    Wants=network-online.target
    After=network-online.target

    [Service]
    Type=oneshot
    Restart=on-failure
    ExecStart=/bin/bash -c " \
      ADDRESS=\$(ip route get 1.1.1.1 | grep -oP 'src \K\d+(\.\d+){3}' | head -1) ;\
      UUID=\$(cat /sys/class/dmi/id/product_uuid) ;\
      curl --retry 5 --retry-delay 5 \"http://gateway.kiss.svc.ops.netai-cloud/new?address=\$ADDRESS&uuid=\$UUID\" ;\
    "
    Restart=on-failure
    RestartSec=30

    [Install]
    WantedBy=multi-user.target
    EOF
    ln -sf /etc/systemd/system/notify-new-box.service /etc/systemd/system/multi-user.target.wants/notify-new-box.service

    # Sysctl Configuration
    mkdir -p /etc/sysctl.d/
    cat <<EOF >/etc/sysctl.d/50-hugepages.conf
    vm.nr_hugepages=8192
    EOF
    cat <<EOF >/etc/sysctl.d/90-reverse-path-filter.conf
    net.ipv4.conf.all.rp_filter=0
    net.ipv4.conf.default.rp_filter=0
    EOF

    # User Configuration
    TENANT_HOME="/opt/vdi/tenants/host"
    mkdir -p "${TENANT_HOME}"
    chmod 700 "${TENANT_HOME}"
    chown tenant:tenant "${TENANT_HOME}"

    # Guest User Configuration
    TENANT_GUEST_HOME="/opt/vdi/tenants/remote/guest"
    mkdir -p "${TENANT_GUEST_HOME}"
    chmod 700 "${TENANT_GUEST_HOME}"
    chown tenant:tenant "${TENANT_GUEST_HOME}"

    # Post-Hook
    ## Desktop Environment Configuration
    if [ "${_IS_DESKTOP}" == "true" ]; then
      ### Common
      dnf install -y \
        "gnutls.${ARCH_WIN32}" \
        mesa-dri-drivers \
        "mesa-dri-drivers.${ARCH_WIN32}" \
        "mesa-libGLU.${ARCH_WIN32}" \
        pipewire \
        "pipewire.${ARCH_WIN32}" \
        vulkan \
        "vulkan-loader.${ARCH_WIN32}" \
        wireplumber \
        xdg-dbus-proxy \
        xorg-x11-server-Xorg

      #### Autologin to X11
      cat <<EOF >/usr/local/bin/xinit
    #!/bin/bash
    # Copyright (c) 2023 Ho Kim (ho.kim@ulagbulag.io). All rights reserved.
    # Use of this source code is governed by a GPL-3-style license that can be
    # found in the LICENSE file.

    # Prehibit errors
    set -e
    # Verbose
    set -x

    echo "Wait until graphic drivers are ready ..."
    ## NVIDIA
    if lspci | grep 'VGA' | grep 'NVIDIA'; then
      while ! nvidia-smi >/dev/null 2>/dev/null; do
        sleep 0.1
      done
    fi

    echo "Starting Xorg display server ..."
    exec /bin/Xorg
    EOF
      chmod 555 /usr/local/bin/xinit

      mkdir -p /etc/profile.d/
      cat <<EOF >/etc/profile.d/x11.sh
    # Copyright (c) 2023 Ho Kim (ho.kim@ulagbulag.io). All rights reserved.
    # Use of this source code is governed by a GPL-3-style license that can be
    # found in the LICENSE file.

    # Execute X11 Display Server on login
    if [[ "\${XDG_SESSION_TYPE}" == "tty" && "\$(id -u)" == "2000" ]]; then
      TTY="\$(tty)"
      if [[ "\${TTY/\/dev\/tty}" == "1" ]]; then
        unset TTY
        exec /usr/local/bin/xinit
      fi
      unset TTY
    fi
    EOF

      ### SystemD Configuration
      SERVICE_HOME="${TENANT_HOME}/.config/systemd/user"

      for service in \
        "pipewire.service default.target.wants/pipewire.service" \
        "pipewire.socket sockets.target.wants/pipewire.socket" \
        "wireplumber.service pipewire-session-manager.service" \
        "wireplumber.service pipewire.service.wants/wireplumber.service" \
      ; do
        SERVICE_SRC="/usr/lib/systemd/user/$(echo "${service}" | awk '{print $1}')"
        SERVICE_DST="${SERVICE_HOME}/$(echo "${service}" | awk '{print $2}')"
        if [ -f "${SERVICE_SRC}" ]; then
          mkdir -p "$(dirname "${SERVICE_DST}")"
          ln -sf "${SERVICE_SRC}" "${SERVICE_DST}"
        fi
      done
      chown -R tenant:tenant "${TENANT_HOME}"

      #### Autologin
      mkdir -p /etc/systemd/system/getty@tty1.service.d/
      cat <<EOF >/etc/systemd/system/getty@tty1.service.d/override.conf
    [Service]
    ExecStart=
    ExecStart=-/sbin/agetty -a tenant --noclear - $TERM
    EOF

      #### Limit the maximum number of TTYs to 1
      _LOGIND="/etc/systemd/logind.conf"
      sed -i 's/^\#\?\(NAutoVTs=\).*$/\11/g' "${_LOGIND}"
      sed -i 's/^\#\?\(ReserveVT=\).*$/\11/g' "${_LOGIND}"
      for i in {2..63}; do
        systemctl mask getty@tty${i}.service >/dev/null
      done

      #### Disable VT Switching
      mkdir -p /etc/X11/xorg.conf.d/
      cat <<EOF >/etc/X11/xorg.conf.d/65-setxkbmap.conf
    Section "ServerFlags"
      Option "DontVTSwitch" "on"
    EndSection

    Section "InputClass"
      Identifier "keyboard defaults"
      MatchIsKeyboard "on"
      Option "XKbOptions" "srvrkeys:none"
    EndSection
    EOF

      #### Disable Screen Blank Time
      cat <<EOF >/etc/X11/xorg.conf.d/10-monitor.conf
    Section "ServerFlags"
      Option "BlankTime" "0"
      Option "OffTime" "0"
      Option "StandbyTime" "0"
      Option "SuspendTime" "0"
    EndSection
    EOF
    fi

    ## DKMS build
    if which dkms >/dev/null 2>/dev/null; then
      dkms autoinstall -k "$(ls /lib/modules/)"
    fi

    %end
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: matchbox-groups
  namespace: kiss
data:
  default.json: |
    {
      "id": "default",
      "name": "default",
      "profile": "kiss",
      "selector": {},
      "metadata": {}
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: matchbox-ignition
  namespace: kiss
data:
  kiss.yaml: |
    ---
    variant: flatcar
    version: 1.0.0
    kernel_arguments:
    passwd:
      users:
        - name: ENV_USERNAME
          ssh_authorized_keys:
            - ENV_SSH_AUTHORIZED_KEYS
          groups:
            - sudo
            - docker
    storage:
      directories:
        - path: /etc/systemd/system/docker.service.d
          filesystem: root
          overwrite: true
      files:
        - path: /etc/docker/daemon.json
          filesystem: root
          overwrite: true
          mode: 0444
          contents:
            inline: |
              {
                "insecure-registries": [
                  "registry.kiss.svc.ops.netai-cloud"
                ]
              }
        - path: /etc/flatcar/update.conf
          filesystem: root
          overwrite: true
          mode: 0444
          contents:
            inline: |
              REBOOT_STRATEGY=off
        - path: /etc/modules-load.d/10-gpu-nvidia-driver.conf
          filesystem: root
          overwrite: true
          mode: 0444
          contents:
            inline: |
              loop
              i2c_core
              ipmi_msghandler
        - path: /etc/sysctl.d/50-hugepages.conf
          filesystem: root
          overwrite: true
          mode: 0444
          contents:
            inline: |
              vm.nr_hugepages=8192
        - path: /etc/sysctl.d/90-reverse-path-filter.conf
          filesystem: root
          overwrite: true
          mode: 0444
          contents:
            inline: |
              net.ipv4.conf.all.rp_filter=0
              net.ipv4.conf.default.rp_filter=0
        - path: /etc/systemd/system/notify-new-box.service
          filesystem: root
          overwrite: true
          mode: 0444
          contents:
            inline: |
              [Unit]
              Description=Notify to the kiss cluster that a new (this) box has been appeared.
              Wants=network-online.target
              After=network-online.target

              [Service]
              Type=oneshot
              ExecStart=/bin/bash -c " \
                  ADDRESS=$(ip route get 1.1.1.1 | grep -oP 'src \K\d+(\.\d+){3}' | head -1) ;\
                  UUID=$(cat /sys/class/dmi/id/product_uuid) ;\
                  curl --retry 5 --retry-delay 5 \"http://gateway.kiss.svc.ops.netai-cloud/new?address=$ADDRESS&uuid=$UUID\" ;\
              "
              Restart=on-failure
              RestartSec=30

              [Install]
              WantedBy=multi-user.target
        - path: /etc/systemd/timesyncd.conf
          filesystem: root
          overwrite: true
          mode: 0444
          contents:
            inline: |
              [Time]
              #NTP=ntp.kiss.svc.ops.netai-cloud
        - path: /opt/bin/python
          filesystem: root
          overwrite: true
          mode: 0555
          contents:
            inline: |
              #!/usr/bin/bash
              # origin: https://github.com/kubernetes-sigs/kubespray/blob/release-2.19/roles/bootstrap-os/files/bootstrap.sh
              set -e

              ARCH=$(uname -m)
              BINDIR="/opt/bin"

              case $ARCH in
                "x86_64")
                  PYPY_ARCH=linux64
                  PYPI_HASH=46818cb3d74b96b34787548343d266e2562b531ddbaf330383ba930ff1930ed5
                  ;;
                "aarch64")
                  PYPY_ARCH=aarch64
                  PYPI_HASH=2e1ae193d98bc51439642a7618d521ea019f45b8fb226940f7e334c548d2b4b9
                  ;;
                *)
                  echo "Unsupported Architecture: ${ARCH}"
                  exit 1
              esac

              PYTHON_VERSION=3.9
              PYPY_VERSION=7.3.9
              PYPY_FILENAME="pypy${PYTHON_VERSION}-v${PYPY_VERSION}-${PYPY_ARCH}"
              PYPI_URL="https://downloads.python.org/pypy/${PYPY_FILENAME}.tar.bz2"

              # provision a python binary
              if [[ ! -e /opt/pypy3/bin/pypy3 ]]; then
                TAR_FILE="${BINDIR}/pyp.tar.bz2"
                sudo wget --tries=5 -O "${TAR_FILE}" "${PYPI_URL}"
                echo "${PYPI_HASH} ${TAR_FILE}" | sha256sum -c -
                sudo tar -xjf "${TAR_FILE}" && sudo rm "${TAR_FILE}"
                sudo mv -n "${PYPY_FILENAME}" "${BINDIR}/../pypy3"
              fi

              # execute python
              export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/pypy3/lib
              exec /opt/pypy3/bin/pypy3 "${@:1}"
        - path: /opt/bin/.bootstrapped
          filesystem: root
          mode: 0444
          contents:
            inline: ""
      links:
        - path: /etc/systemd/system/multi-user.target.wants/notify-new-box.service
          target: /etc/systemd/system/notify-new-box.service
          filesystem: root
          overwrite: true
          hard: false
    systemd:
      units:
        - name: docker.service
          enable: true
          dropins:
            - name: 30-increase-ulimit.conf
              contents: |
                [Service]
                LimitMEMLOCK=infinity
        - name: ntpd.service
          enable: false
        - name: systemd-timesyncd.service
          enable: true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: matchbox-profiles
  namespace: kiss
data:
  kiss.json: |
    {
      "id": "kiss",
      "name": "NetAI Cloud KISS Linux (Flatcar Container Linux)",
      "boot": {
        "kernel": "http://assets.kiss.svc.ops.netai-cloud/flatcar-${buildarch}/current/flatcar_production_pxe.vmlinuz",
        "initrd": [
          "http://assets.kiss.svc.ops.netai-cloud/flatcar-${buildarch}/current/flatcar_production_pxe_image.cpio.gz"
        ],
        "args": [
          "initrd=flatcar_production_pxe_image.cpio.gz",
          "flatcar.config.url=http://matchbox.kiss.svc.ops.netai-cloud/ignition",
          "flatcar.first_boot=yes"
        ]
      },
      "ignition_id": "kiss.yaml"
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: matchbox
  namespace: kiss
  labels:
    name: matchbox
    kissService: "true"
    serviceType: internal
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      name: matchbox
  template:
    metadata:
      labels:
        name: matchbox
        kissService: "true"
        serviceType: internal
    spec:
      affinity:
        nodeAffinity:
          # KISS normal control plane nodes should be preferred
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              preference:
                matchExpressions:
                  - key: node-role.kubernetes.io/kiss-ephemeral-control-plane
                    operator: DoesNotExist
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node-role.kubernetes.io/kiss
                    operator: In
                    values:
                      - ControlPlane
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      initContainers:
        - name: init-data
          image: docker.io/ubuntu:rolling
          command:
            - bash
          args:
            - -c
            - |
              # Boot
              cp /var/lib/matchbox/assets/boot-raw/* /var/lib/matchbox/assets/boot/
              SSH_AUTHORIZED_KEYS_SED=$(sed -e 's/[&\\/]/\\&/g; s/$/\\/' -e '$s/\\$//' <<< ${SSH_AUTHORIZED_KEYS})
              sed -i "s/NETWORK_WIRELESS_WIFI_SSID/${NETWORK_WIRELESS_WIFI_SSID}/g" /var/lib/matchbox/assets/boot/*.ks
              sed -i "s/NETWORK_WIRELESS_WIFI_KEY_MGMT/${NETWORK_WIRELESS_WIFI_KEY_MGMT}/g" /var/lib/matchbox/assets/boot/*.ks
              sed -i "s/NETWORK_WIRELESS_WIFI_KEY_PSK/${NETWORK_WIRELESS_WIFI_KEY_PSK}/g" /var/lib/matchbox/assets/boot/*.ks
              sed -i "s/ENV_SSH_AUTHORIZED_KEYS/${SSH_AUTHORIZED_KEYS_SED}/g" /var/lib/matchbox/assets/boot/*.ks
              sed -i "s/ENV_USERNAME/${USERNAME}/g" /var/lib/matchbox/assets/boot/*.ks

              # Ignition
              cp /var/lib/matchbox/ignition-raw/*.yaml /var/lib/matchbox/ignition/
              SSH_AUTHORIZED_KEYS_SED=$(sed -e 's/[&\\/]/\\&/g; s/$/\\/' -e '$s/\\$//' <<< ${SSH_AUTHORIZED_KEYS})
              sed -i "s/ENV_SSH_AUTHORIZED_KEYS/${SSH_AUTHORIZED_KEYS_SED}/g" /var/lib/matchbox/ignition/*.yaml
              sed -i "s/ENV_USERNAME/${USERNAME}/g" /var/lib/matchbox/ignition/*.yaml
          env:
            - name: NETWORK_WIRELESS_WIFI_KEY_MGMT
              valueFrom:
                secretKeyRef:
                  name: kiss-config
                  key: network_wireless_wifi_key_mgmt
            - name: NETWORK_WIRELESS_WIFI_KEY_PSK
              valueFrom:
                secretKeyRef:
                  name: kiss-config
                  key: network_wireless_wifi_key_psk
            - name: NETWORK_WIRELESS_WIFI_SSID
              valueFrom:
                secretKeyRef:
                  name: kiss-config
                  key: network_wireless_wifi_ssid
            - name: SSH_AUTHORIZED_KEYS
              valueFrom:
                configMapKeyRef:
                  name: kiss-config
                  key: auth_ssh_key_id_ed25519_public
            - name: USERNAME
              valueFrom:
                configMapKeyRef:
                  name: kiss-config
                  key: auth_ssh_username
          resources:
            requests:
              cpu: 30m
              memory: 20Mi
            limits:
              cpu: 50m
              memory: 50Mi
          volumeMounts:
            - name: boot
              mountPath: /var/lib/matchbox/assets/boot
            - name: boot-raw
              mountPath: /var/lib/matchbox/assets/boot-raw
            - name: ignition
              mountPath: /var/lib/matchbox/ignition
            - name: ignition-raw
              mountPath: /var/lib/matchbox/ignition-raw
            - name: tmp
              mountPath: /tmp
      containers:
        - name: matchbox
          image: quay.io/poseidon/matchbox:v0.9.1-48-gddbed051
          env:
            - name: MATCHBOX_ADDRESS
              value: 0.0.0.0:8080
            - name: MATCHBOX_LOG_LEVEL
              value: debug
          ports:
            - name: http
              containerPort: 8080
          livenessProbe:
            initialDelaySeconds: 5
            httpGet:
              path: /
              port: 8080
          resources:
            requests:
              cpu: 30m
              memory: 20Mi
            limits:
              cpu: 50m
              memory: 50Mi
          volumeMounts:
            - name: assets
              mountPath: /var/lib/matchbox/assets
            - name: boot
              mountPath: /var/lib/matchbox/assets/boot
            - name: groups
              mountPath: /var/lib/matchbox/groups
            - name: ignition
              mountPath: /var/lib/matchbox/ignition
            - name: profiles
              mountPath: /var/lib/matchbox/profiles
      volumes:
        - name: assets
          emptyDir: {}
        - name: boot
          emptyDir: {}
        - name: boot-raw
          configMap:
            name: matchbox-boot
            defaultMode: 0400
        - name: groups
          configMap:
            name: matchbox-groups
            defaultMode: 0400
        - name: ignition
          emptyDir: {}
        - name: ignition-raw
          configMap:
            name: matchbox-ignition
            defaultMode: 0400
        - name: profiles
          configMap:
            name: matchbox-profiles
            defaultMode: 0400
        - name: tmp
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: matchbox
  namespace: kiss
spec:
  type: ClusterIP
  selector:
    name: matchbox
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8080
