---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: collector
  namespace: dash
  labels:
    name: collector
    serviceType: internal
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      name: collector
  template:
    metadata:
      # annotations:
      #   instrumentation.opentelemetry.io/inject-sdk: "true"
      labels:
        name: collector
        serviceType: internal
    spec:
      affinity:
        nodeAffinity:
          # KISS normal control plane nodes should be preferred
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              preference:
                matchExpressions:
                  - key: node-role.kubernetes.io/kiss-ephemeral-control-plane
                    operator: DoesNotExist
            # KISS compute nodes should be preferred
            - weight: 2
              preference:
                matchExpressions:
                  - key: node-role.kubernetes.io/kiss
                    operator: In
                    values:
                      - Compute
            # KISS gateway nodes should be more preferred
            - weight: 4
              preference:
                matchExpressions:
                  - key: node-role.kubernetes.io/kiss
                    operator: In
                    values:
                      - Gateway
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node-role.kubernetes.io/kiss
                    operator: In
                    values:
                      - ControlPlane
                      - Compute
                      - Gateway
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccount: nats-dash-collector
      containers:
        - name: collector
          image: quay.io/ulagbulag/openark:latest
          imagePullPolicy: Always
          command:
            - dash-collector
          env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: object-storage-user-0
                  key: CONSOLE_ACCESS_KEY
            - name: AWS_ENDPOINT_URL
              value: http://minio
            - name: AWS_REGION
              value: us-east-1
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: object-storage-user-0
                  key: CONSOLE_SECRET_KEY
            - name: DASH_COLLECTOR_GRPC_ADDR
              value: 0.0.0.0:4317
            - name: NATS_ACCOUNT
              value: nats-dash-collector
            - name: NATS_ADDRS
              value: nats
            - name: NATS_PASSWORD_PATH
              value: /var/run/secrets/nats.io/token
            - name: NATS_TLS_REQUIRED
              value: "false"
            - name: PIPE_FLUSH
              value: "10"
            - name: PIPE_MODEL_OUT
              value: dash.collector
            - name: PIPE_STORAGE_NAME
              value: default
            - name: RUST_LOG
              value: INFO
          ports:
            - name: otlp-grpc
              protocol: TCP
              containerPort: 4317
            - name: otlp-http
              protocol: TCP
              containerPort: 4318
          resources:
            requests:
              cpu: 1000m
              memory: 100Mi
            limits:
              cpu: 4000m
              memory: 2000Mi
          volumeMounts:
            - name: nats-token
              mountPath: /var/run/secrets/nats.io
              readOnly: true
      volumes:
        - name: nats-token
          secret:
            secretName: nats-dash-collector-nats-bound-token
            optional: false
            items:
              - key: token
                path: token
---
apiVersion: v1
kind: Service
metadata:
  name: collector
  namespace: dash
spec:
  selector:
    name: collector
  ports:
    - appProtocol: grpc
      name: otlp-grpc
      port: 4317
      protocol: TCP
      targetPort: 4317
    - appProtocol: http
      name: otlp-http
      port: 4318
      protocol: TCP
      targetPort: 4318
---
apiVersion: v1
kind: Service
metadata:
  name: collector-headless
  namespace: dash
spec:
  clusterIP: None
  selector:
    name: collector
  ports:
    - appProtocol: grpc
      name: otlp-grpc
      port: 4317
      protocol: TCP
      targetPort: 4317
    - appProtocol: http
      name: otlp-http
      port: 4318
      protocol: TCP
      targetPort: 4318
---
apiVersion: dash.ulagbulag.io/v1alpha1
kind: ModelStorage
metadata:
  name: default
  namespace: dash
spec:
  objectStorage:
    owned:
      resources:
        requests:
          storage: 1Ti
      totalNodes: 1
      totalVolumesPerNode: 4
---
apiVersion: dash.ulagbulag.io/v1alpha1
kind: ModelClaim
metadata:
  name: dash.collector
  namespace: dash
spec:
  allowReplacement: true
  bindingPolicy: LowestLatency
  deletionPolicy: Delete
  storage: ObjectStorage
---
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: dash-observability
  namespace: dash
spec:
  config: |
    receivers:
      otlp:
        protocols:
          grpc:
          http:
      # Dummy receiver that's never used, because a pipeline is required to have one.
      otlp/spanmetrics:
        protocols:
          grpc:
            endpoint: localhost:65535

    connectors:
      spanmetrics:
        dimensions:
          - name: data.len
          - name: data.model
          - name: data.model_from
        histogram:
          explicit:
            buckets:
              - 2ms
              - 4ms
              - 6ms
              - 8ms
              - 10ms
              - 20ms
              - 30ms
              - 40ms
              - 50ms
              - 100ms
              - 200ms
              - 400ms
              - 800ms
              - 1000ms
              - 1400ms
              - 2000ms
              - 5000ms
              - 10000ms
              - 15000ms
          unit: ms
        metrics_flush_interval: 5s
        namespace: dash.metrics

    exporters:
      logging:
        loglevel: debug
      loki:
        endpoint: "http://loki-distributed-distributor.monitoring.svc:3100/loki/api/v1/push"
      otlp:
        endpoint: "collector:4317"
        tls:
          insecure: true
      otlp/tempo:
        endpoint: "tempo-distributed-distributor.monitoring.svc:4317"
        tls:
          insecure: true
      prometheusremotewrite:
        endpoint: "http://kube-prometheus-stack-prometheus.monitoring.svc:9090/api/v1/write"

        # # Enabling the Write-Ahead-Log for the exporter.
        # wal:
        #   # The directory to store the WAL in
        #   directory: ./prom_rw
        #   # Optional count of elements to be read from the WAL before truncating; default of 300
        #   # buffer_size: 300
        #   # Optional frequency for how often the WAL should be truncated. It is a time.ParseDuration; default of 1m
        #   # truncate_frequency: 1m

        # Convert resource attributes to metric labels
        resource_to_telemetry_conversion:
          enabled: true
        target_info:
          enabled: true

    processors:
      batch:
        send_batch_size: 1000
        timeout: 10s
      memory_limiter:
        check_interval: 1s
        limit_percentage: 75
        spike_limit_percentage: 15

    service:
      pipelines:
        traces:
          receivers:
            - otlp
          processors:
            - memory_limiter
            - batch
          exporters:
            - otlp
            - otlp/tempo
            - spanmetrics
        metrics:
          receivers:
            - otlp
          processors:
            - memory_limiter
            - batch
          exporters:
            - otlp
            - prometheusremotewrite
        metrics/spanmetrics:
          receivers:
            - spanmetrics
          processors:
            - memory_limiter
            - batch
          exporters:
            - prometheusremotewrite
        logs:
          receivers:
            - otlp
          processors:
            - memory_limiter
            - batch
          exporters:
            - loki
            - otlp
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: dash-observability
  namespace: "dash"
spec:
  endpoints:
    - path: /metrics
      port: monitoring
      interval: 5s
  namespaceSelector:
    matchNames:
      - dash
  selector:
    matchLabels:
      app.kubernetes.io/component: opentelemetry-collector
      app.kubernetes.io/instance: dash.dash-observability
      app.kubernetes.io/managed-by: opentelemetry-operator
      app.kubernetes.io/part-of: opentelemetry
